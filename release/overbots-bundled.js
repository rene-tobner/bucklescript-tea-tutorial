var overbots = (function (exports) {
  'use strict';

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function setStyle(n, key, value) {
    n.style[key] = value;
    
  }

  function setStyleProperty(n, priorityOpt, key, value) {
    var priority = priorityOpt !== undefined ? priorityOpt : false;
    var style = n.style;
    var _valid = style.setProperty;
    if (_valid !== undefined) {
      return style.setProperty(key, value, priority ? "important" : null);
    } else {
      return setStyle(n, key, value);
    }
  }

  function insertBefore(n, child, refNode) {
    return n.insertBefore(child, refNode);
  }

  function setAttributeNsOptional(n, namespace, key, value) {
    if (namespace === "") {
      return n.setAttribute(key, value);
    } else {
      return n.setAttributeNS(namespace, key, value);
    }
  }

  function removeAttributeNsOptional(n, namespace, key) {
    if (namespace === "") {
      return n.removeAttribute(key);
    } else {
      return n.removeAttributeNS(namespace, key);
    }
  }

  function addEventListener(n, typ, listener, options) {
    return n.addEventListener(typ, listener, options);
  }

  function removeEventListener(n, typ, listener, options) {
    return n.removeEventListener(typ, listener, options);
  }

  function remove_polyfill(param) {
    return (// remove polyfill
    (function() {
      if (!('remove' in Element.prototype)) {
        Element.prototype.remove = function() {
          if (this.parentNode) {
            this.parentNode.removeChild(this);
          }
        };
      }  }()));
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function requestAnimationFrame_polyfill(param) {
    return (// requestAnimationFrame polyfill
    (function() {
        var lastTime = 0;
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
            window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
                                       || window[vendors[x]+'CancelRequestAnimationFrame'];
        }

        if (!window.requestAnimationFrame)
            window.requestAnimationFrame = function(callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function() { callback(currTime + timeToCall); },
                  timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };

        if (!window.cancelAnimationFrame)
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
    }()));
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function polyfills(param) {
    remove_polyfill();
    requestAnimationFrame_polyfill();
    
  }
  /* No side effect */

  function caml_array_sub(x, offset, len) {
    var result = new Array(len);
    var j = 0;
    var i = offset;
    while(j < len) {
      result[j] = x[i];
      j = j + 1 | 0;
      i = i + 1 | 0;
    }  return result;
  }

  function get$2(xs, index) {
    if (index < 0 || index >= xs.length) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "index out of bounds",
            Error: new Error()
          };
    }
    return xs[index];
  }

  function caml_make_vect(len, init) {
    var b = new Array(len);
    for(var i = 0; i < len; ++i){
      b[i] = init;
    }
    return b;
  }
  /* No side effect */

  function app(_f, _args) {
    while(true) {
      var args = _args;
      var f = _f;
      var init_arity = f.length;
      var arity = init_arity === 0 ? 1 : init_arity;
      var len = args.length;
      var d = arity - len | 0;
      if (d === 0) {
        return f.apply(null, args);
      }
      if (d >= 0) {
        return (function(f,args){
        return function (x) {
          return app(f, args.concat([x]));
        }
        }(f,args));
      }
      _args = caml_array_sub(args, arity, -d | 0);
      _f = f.apply(null, caml_array_sub(args, 0, arity));
      continue ;
    }}

  function _1(o, a0) {
    var arity = o.length;
    if (arity === 1) {
      return o(a0);
    } else {
      switch (arity) {
        case 1 :
            return o(a0);
        case 2 :
            return function (param) {
              return o(a0, param);
            };
        case 3 :
            return function (param, param$1) {
              return o(a0, param, param$1);
            };
        case 4 :
            return function (param, param$1, param$2) {
              return o(a0, param, param$1, param$2);
            };
        case 5 :
            return function (param, param$1, param$2, param$3) {
              return o(a0, param, param$1, param$2, param$3);
            };
        case 6 :
            return function (param, param$1, param$2, param$3, param$4) {
              return o(a0, param, param$1, param$2, param$3, param$4);
            };
        case 7 :
            return function (param, param$1, param$2, param$3, param$4, param$5) {
              return o(a0, param, param$1, param$2, param$3, param$4, param$5);
            };
        default:
          return app(o, [a0]);
      }
    }
  }

  function _2(o, a0, a1) {
    var arity = o.length;
    if (arity === 2) {
      return o(a0, a1);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [a1]);
        case 2 :
            return o(a0, a1);
        case 3 :
            return function (param) {
              return o(a0, a1, param);
            };
        case 4 :
            return function (param, param$1) {
              return o(a0, a1, param, param$1);
            };
        case 5 :
            return function (param, param$1, param$2) {
              return o(a0, a1, param, param$1, param$2);
            };
        case 6 :
            return function (param, param$1, param$2, param$3) {
              return o(a0, a1, param, param$1, param$2, param$3);
            };
        case 7 :
            return function (param, param$1, param$2, param$3, param$4) {
              return o(a0, a1, param, param$1, param$2, param$3, param$4);
            };
        default:
          return app(o, [
                      a0,
                      a1
                    ]);
      }
    }
  }

  function _3(o, a0, a1, a2) {
    var arity = o.length;
    if (arity === 3) {
      return o(a0, a1, a2);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2
                      ]);
        case 2 :
            return app(o(a0, a1), [a2]);
        case 3 :
            return o(a0, a1, a2);
        case 4 :
            return function (param) {
              return o(a0, a1, a2, param);
            };
        case 5 :
            return function (param, param$1) {
              return o(a0, a1, a2, param, param$1);
            };
        case 6 :
            return function (param, param$1, param$2) {
              return o(a0, a1, a2, param, param$1, param$2);
            };
        case 7 :
            return function (param, param$1, param$2, param$3) {
              return o(a0, a1, a2, param, param$1, param$2, param$3);
            };
        default:
          return app(o, [
                      a0,
                      a1,
                      a2
                    ]);
      }
    }
  }

  function _4(o, a0, a1, a2, a3) {
    var arity = o.length;
    if (arity === 4) {
      return o(a0, a1, a2, a3);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2,
                        a3
                      ]);
        case 2 :
            return app(o(a0, a1), [
                        a2,
                        a3
                      ]);
        case 3 :
            return app(o(a0, a1, a2), [a3]);
        case 4 :
            return o(a0, a1, a2, a3);
        case 5 :
            return function (param) {
              return o(a0, a1, a2, a3, param);
            };
        case 6 :
            return function (param, param$1) {
              return o(a0, a1, a2, a3, param, param$1);
            };
        case 7 :
            return function (param, param$1, param$2) {
              return o(a0, a1, a2, a3, param, param$1, param$2);
            };
        default:
          return app(o, [
                      a0,
                      a1,
                      a2,
                      a3
                    ]);
      }
    }
  }

  function _5(o, a0, a1, a2, a3, a4) {
    var arity = o.length;
    if (arity === 5) {
      return o(a0, a1, a2, a3, a4);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2,
                        a3,
                        a4
                      ]);
        case 2 :
            return app(o(a0, a1), [
                        a2,
                        a3,
                        a4
                      ]);
        case 3 :
            return app(o(a0, a1, a2), [
                        a3,
                        a4
                      ]);
        case 4 :
            return app(o(a0, a1, a2, a3), [a4]);
        case 5 :
            return o(a0, a1, a2, a3, a4);
        case 6 :
            return function (param) {
              return o(a0, a1, a2, a3, a4, param);
            };
        case 7 :
            return function (param, param$1) {
              return o(a0, a1, a2, a3, a4, param, param$1);
            };
        default:
          return app(o, [
                      a0,
                      a1,
                      a2,
                      a3,
                      a4
                    ]);
      }
    }
  }

  function _6(o, a0, a1, a2, a3, a4, a5) {
    var arity = o.length;
    if (arity === 6) {
      return o(a0, a1, a2, a3, a4, a5);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2,
                        a3,
                        a4,
                        a5
                      ]);
        case 2 :
            return app(o(a0, a1), [
                        a2,
                        a3,
                        a4,
                        a5
                      ]);
        case 3 :
            return app(o(a0, a1, a2), [
                        a3,
                        a4,
                        a5
                      ]);
        case 4 :
            return app(o(a0, a1, a2, a3), [
                        a4,
                        a5
                      ]);
        case 5 :
            return app(o(a0, a1, a2, a3, a4), [a5]);
        case 6 :
            return o(a0, a1, a2, a3, a4, a5);
        case 7 :
            return function (param) {
              return o(a0, a1, a2, a3, a4, a5, param);
            };
        default:
          return app(o, [
                      a0,
                      a1,
                      a2,
                      a3,
                      a4,
                      a5
                    ]);
      }
    }
  }

  function _7(o, a0, a1, a2, a3, a4, a5, a6) {
    var arity = o.length;
    if (arity === 7) {
      return o(a0, a1, a2, a3, a4, a5, a6);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2,
                        a3,
                        a4,
                        a5,
                        a6
                      ]);
        case 2 :
            return app(o(a0, a1), [
                        a2,
                        a3,
                        a4,
                        a5,
                        a6
                      ]);
        case 3 :
            return app(o(a0, a1, a2), [
                        a3,
                        a4,
                        a5,
                        a6
                      ]);
        case 4 :
            return app(o(a0, a1, a2, a3), [
                        a4,
                        a5,
                        a6
                      ]);
        case 5 :
            return app(o(a0, a1, a2, a3, a4), [
                        a5,
                        a6
                      ]);
        case 6 :
            return app(o(a0, a1, a2, a3, a4, a5), [a6]);
        case 7 :
            return o(a0, a1, a2, a3, a4, a5, a6);
        default:
          return app(o, [
                      a0,
                      a1,
                      a2,
                      a3,
                      a4,
                      a5,
                      a6
                    ]);
      }
    }
  }

  function _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {
    var arity = o.length;
    if (arity === 8) {
      return o(a0, a1, a2, a3, a4, a5, a6, a7);
    } else {
      switch (arity) {
        case 1 :
            return app(o(a0), [
                        a1,
                        a2,
                        a3,
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 2 :
            return app(o(a0, a1), [
                        a2,
                        a3,
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 3 :
            return app(o(a0, a1, a2), [
                        a3,
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 4 :
            return app(o(a0, a1, a2, a3), [
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 5 :
            return app(o(a0, a1, a2, a3, a4), [
                        a5,
                        a6,
                        a7
                      ]);
        case 6 :
            return app(o(a0, a1, a2, a3, a4, a5), [
                        a6,
                        a7
                      ]);
        case 7 :
            return app(o(a0, a1, a2, a3, a4, a5, a6), [a7]);
        default:
          return app(o, [
                      a0,
                      a1,
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7
                    ]);
      }
    }
  }
  /* No side effect */

  function caml_int_compare(x, y) {
    if (x < y) {
      return -1;
    } else if (x === y) {
      return 0;
    } else {
      return 1;
    }
  }

  function caml_bool_compare(x, y) {
    if (x) {
      if (y) {
        return 0;
      } else {
        return 1;
      }
    } else if (y) {
      return -1;
    } else {
      return 0;
    }
  }

  function caml_string_compare(s1, s2) {
    if (s1 === s2) {
      return 0;
    } else if (s1 < s2) {
      return -1;
    } else {
      return 1;
    }
  }

  function caml_int_min(x, y) {
    if (x < y) {
      return x;
    } else {
      return y;
    }
  }
  /* No side effect */

  var for_in = (function(o,foo){
          for (var x in o) { foo(x); }});

  function caml_compare(a, b) {
    if (a === b) {
      return 0;
    }
    var a_type = typeof a;
    var b_type = typeof b;
    switch (a_type) {
      case "boolean" :
          if (b_type === "boolean") {
            return caml_bool_compare(a, b);
          }
          break;
      case "function" :
          if (b_type === "function") {
            throw {
                  RE_EXN_ID: "Invalid_argument",
                  _1: "compare: functional value",
                  Error: new Error()
                };
          }
          break;
      case "number" :
          if (b_type === "number") {
            return caml_int_compare(a, b);
          }
          break;
      case "string" :
          if (b_type === "string") {
            return caml_string_compare(a, b);
          } else {
            return 1;
          }
      case "undefined" :
          return -1;
        
    }
    switch (b_type) {
      case "string" :
          return -1;
      case "undefined" :
          return 1;
      default:
        if (a_type === "boolean") {
          return 1;
        }
        if (b_type === "boolean") {
          return -1;
        }
        if (a_type === "function") {
          return 1;
        }
        if (b_type === "function") {
          return -1;
        }
        if (a_type === "number") {
          if (b === null || b.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
            return 1;
          } else {
            return -1;
          }
        }
        if (b_type === "number") {
          if (a === null || a.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
            return -1;
          } else {
            return 1;
          }
        }
        if (a === null) {
          if (b.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
            return 1;
          } else {
            return -1;
          }
        }
        if (b === null) {
          if (a.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
            return -1;
          } else {
            return 1;
          }
        }
        if (a.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
          if (b.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
            return aux_obj_compare(a, b);
          } else {
            return -1;
          }
        }
        var tag_a = a.TAG | 0;
        var tag_b = b.TAG | 0;
        if (tag_a === 248) {
          return caml_int_compare(a[1], b[1]);
        }
        if (tag_a === 251) {
          throw {
                RE_EXN_ID: "Invalid_argument",
                _1: "equal: abstract value",
                Error: new Error()
              };
        }
        if (tag_a !== tag_b) {
          if (tag_a < tag_b) {
            return -1;
          } else {
            return 1;
          }
        }
        var len_a = a.length | 0;
        var len_b = b.length | 0;
        if (len_a === len_b) {
          if (Array.isArray(a)) {
            var _i = 0;
            while(true) {
              var i = _i;
              if (i === len_a) {
                return 0;
              }
              var res = caml_compare(a[i], b[i]);
              if (res !== 0) {
                return res;
              }
              _i = i + 1 | 0;
              continue ;
            }        } else if ((a instanceof Date && b instanceof Date)) {
            return (a - b);
          } else {
            return aux_obj_compare(a, b);
          }
        } else if (len_a < len_b) {
          var _i$1 = 0;
          while(true) {
            var i$1 = _i$1;
            if (i$1 === len_a) {
              return -1;
            }
            var res$1 = caml_compare(a[i$1], b[i$1]);
            if (res$1 !== 0) {
              return res$1;
            }
            _i$1 = i$1 + 1 | 0;
            continue ;
          }      } else {
          var _i$2 = 0;
          while(true) {
            var i$2 = _i$2;
            if (i$2 === len_b) {
              return 1;
            }
            var res$2 = caml_compare(a[i$2], b[i$2]);
            if (res$2 !== 0) {
              return res$2;
            }
            _i$2 = i$2 + 1 | 0;
            continue ;
          }      }
    }
  }

  function aux_obj_compare(a, b) {
    var min_key_lhs = {
      contents: undefined
    };
    var min_key_rhs = {
      contents: undefined
    };
    var do_key = function (param, key) {
      var min_key = param[2];
      var b = param[1];
      if (!(!b.hasOwnProperty(key) || caml_compare(param[0][key], b[key]) > 0)) {
        return ;
      }
      var mk = min_key.contents;
      if (mk !== undefined && key >= mk) {
        return ;
      } else {
        min_key.contents = key;
        return ;
      }
    };
    var partial_arg = [
      a,
      b,
      min_key_rhs
    ];
    var do_key_a = function (param) {
      return do_key(partial_arg, param);
    };
    var partial_arg$1 = [
      b,
      a,
      min_key_lhs
    ];
    var do_key_b = function (param) {
      return do_key(partial_arg$1, param);
    };
    for_in(a, do_key_a);
    for_in(b, do_key_b);
    var match = min_key_lhs.contents;
    var match$1 = min_key_rhs.contents;
    if (match !== undefined) {
      if (match$1 !== undefined) {
        return caml_string_compare(match, match$1);
      } else {
        return -1;
      }
    } else if (match$1 !== undefined) {
      return 1;
    } else {
      return 0;
    }
  }

  function caml_equal(a, b) {
    if (a === b) {
      return true;
    }
    var a_type = typeof a;
    if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a === null) {
      return false;
    }
    var b_type = typeof b;
    if (a_type === "function" || b_type === "function") {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "equal: functional value",
            Error: new Error()
          };
    }
    if (b_type === "number" || b_type === "undefined" || b === null) {
      return false;
    }
    var tag_a = a.TAG | 0;
    var tag_b = b.TAG | 0;
    if (tag_a === 248) {
      return a[1] === b[1];
    }
    if (tag_a === 251) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "equal: abstract value",
            Error: new Error()
          };
    }
    if (tag_a !== tag_b) {
      return false;
    }
    var len_a = a.length | 0;
    var len_b = b.length | 0;
    if (len_a === len_b) {
      if (Array.isArray(a)) {
        var _i = 0;
        while(true) {
          var i = _i;
          if (i === len_a) {
            return true;
          }
          if (!caml_equal(a[i], b[i])) {
            return false;
          }
          _i = i + 1 | 0;
          continue ;
        }    } else if ((a instanceof Date && b instanceof Date)) {
        return !(a > b || a < b);
      } else {
        var result = {
          contents: true
        };
        var do_key_a = function (key) {
          if (!b.hasOwnProperty(key)) {
            result.contents = false;
            return ;
          }
          
        };
        var do_key_b = function (key) {
          if (!a.hasOwnProperty(key) || !caml_equal(b[key], a[key])) {
            result.contents = false;
            return ;
          }
          
        };
        for_in(a, do_key_a);
        if (result.contents) {
          for_in(b, do_key_b);
        }
        return result.contents;
      }
    } else {
      return false;
    }
  }
  /* No side effect */

  function caml_create_bytes(len) {
    if (len < 0) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.create",
            Error: new Error()
          };
    }
    var result = new Array(len);
    for(var i = 0; i < len; ++i){
      result[i] = /* '\000' */0;
    }
    return result;
  }

  function caml_blit_bytes(s1, i1, s2, i2, len) {
    if (len <= 0) {
      return ;
    }
    if (s1 === s2) {
      if (i1 < i2) {
        var range_a = (s1.length - i2 | 0) - 1 | 0;
        var range_b = len - 1 | 0;
        var range = range_a > range_b ? range_b : range_a;
        for(var j = range; j >= 0; --j){
          s1[i2 + j | 0] = s1[i1 + j | 0];
        }
        return ;
      }
      if (i1 <= i2) {
        return ;
      }
      var range_a$1 = (s1.length - i1 | 0) - 1 | 0;
      var range_b$1 = len - 1 | 0;
      var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;
      for(var k = 0; k <= range$1; ++k){
        s1[i2 + k | 0] = s1[i1 + k | 0];
      }
      return ;
    }
    var off1 = s1.length - i1 | 0;
    if (len <= off1) {
      for(var i = 0; i < len; ++i){
        s2[i2 + i | 0] = s1[i1 + i | 0];
      }
      return ;
    }
    for(var i$1 = 0; i$1 < off1; ++i$1){
      s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];
    }
    for(var i$2 = off1; i$2 < len; ++i$2){
      s2[i2 + i$2 | 0] = /* '\000' */0;
    }
    
  }

  function bytes_to_string(a) {
    var len = a.length;
    var s = "";
    var s_len = len;
    if (len <= 4096 && len === a.length) {
      return String.fromCharCode.apply(null, a);
    }
    var offset = 0;
    while(s_len > 0) {
      var next = s_len < 1024 ? s_len : 1024;
      var tmp_bytes = new Array(next);
      for(var k = 0; k < next; ++k){
        tmp_bytes[k] = a[k + offset | 0];
      }
      s = s + String.fromCharCode.apply(null, tmp_bytes);
      s_len = s_len - next | 0;
      offset = offset + next | 0;
    }  return s;
  }

  function caml_blit_string(s1, i1, s2, i2, len) {
    if (len <= 0) {
      return ;
    }
    var off1 = s1.length - i1 | 0;
    if (len <= off1) {
      for(var i = 0; i < len; ++i){
        s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);
      }
      return ;
    }
    for(var i$1 = 0; i$1 < off1; ++i$1){
      s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);
    }
    for(var i$2 = off1; i$2 < len; ++i$2){
      s2[i2 + i$2 | 0] = /* '\000' */0;
    }
    
  }

  function bytes_of_string(s) {
    var len = s.length;
    var res = new Array(len);
    for(var i = 0; i < len; ++i){
      res[i] = s.charCodeAt(i);
    }
    return res;
  }
  /* No side effect */

  function lowercase(c) {
    if (c >= /* 'A' */65 && c <= /* 'Z' */90 || c >= /* '\192' */192 && c <= /* '\214' */214 || c >= /* '\216' */216 && c <= /* '\222' */222) {
      return c + 32 | 0;
    } else {
      return c;
    }
  }

  function parse_format(fmt) {
    var len = fmt.length;
    if (len > 31) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "format_int: format too long",
            Error: new Error()
          };
    }
    var f = {
      justify: "+",
      signstyle: "-",
      filter: " ",
      alternate: false,
      base: /* Dec */2,
      signedconv: false,
      width: 0,
      uppercase: false,
      sign: 1,
      prec: -1,
      conv: "f"
    };
    var _i = 0;
    while(true) {
      var i = _i;
      if (i >= len) {
        return f;
      }
      var c = fmt.charCodeAt(i);
      var exit = 0;
      if (c >= 69) {
        if (c >= 88) {
          if (c >= 121) {
            exit = 1;
          } else {
            switch (c) {
              case 88 :
                  f.base = /* Hex */1;
                  f.uppercase = true;
                  _i = i + 1 | 0;
                  continue ;
              case 101 :
              case 102 :
              case 103 :
                  exit = 5;
                  break;
              case 100 :
              case 105 :
                  exit = 4;
                  break;
              case 111 :
                  f.base = /* Oct */0;
                  _i = i + 1 | 0;
                  continue ;
              case 117 :
                  f.base = /* Dec */2;
                  _i = i + 1 | 0;
                  continue ;
              case 89 :
              case 90 :
              case 91 :
              case 92 :
              case 93 :
              case 94 :
              case 95 :
              case 96 :
              case 97 :
              case 98 :
              case 99 :
              case 104 :
              case 106 :
              case 107 :
              case 108 :
              case 109 :
              case 110 :
              case 112 :
              case 113 :
              case 114 :
              case 115 :
              case 116 :
              case 118 :
              case 119 :
                  exit = 1;
                  break;
              case 120 :
                  f.base = /* Hex */1;
                  _i = i + 1 | 0;
                  continue ;
              
            }
          }
        } else if (c >= 72) {
          exit = 1;
        } else {
          f.signedconv = true;
          f.uppercase = true;
          f.conv = String.fromCharCode(lowercase(c));
          _i = i + 1 | 0;
          continue ;
        }
      } else {
        switch (c) {
          case 35 :
              f.alternate = true;
              _i = i + 1 | 0;
              continue ;
          case 32 :
          case 43 :
              exit = 2;
              break;
          case 45 :
              f.justify = "-";
              _i = i + 1 | 0;
              continue ;
          case 46 :
              f.prec = 0;
              var j = i + 1 | 0;
              while((function(j){
                  return function () {
                    var w = fmt.charCodeAt(j) - /* '0' */48 | 0;
                    return w >= 0 && w <= 9;
                  }
                  }(j))()) {
                f.prec = (Math.imul(f.prec, 10) + fmt.charCodeAt(j) | 0) - /* '0' */48 | 0;
                j = j + 1 | 0;
              }            _i = j;
              continue ;
          case 33 :
          case 34 :
          case 36 :
          case 37 :
          case 38 :
          case 39 :
          case 40 :
          case 41 :
          case 42 :
          case 44 :
          case 47 :
              exit = 1;
              break;
          case 48 :
              f.filter = "0";
              _i = i + 1 | 0;
              continue ;
          case 49 :
          case 50 :
          case 51 :
          case 52 :
          case 53 :
          case 54 :
          case 55 :
          case 56 :
          case 57 :
              exit = 3;
              break;
          default:
            exit = 1;
        }
      }
      switch (exit) {
        case 1 :
            _i = i + 1 | 0;
            continue ;
        case 2 :
            f.signstyle = String.fromCharCode(c);
            _i = i + 1 | 0;
            continue ;
        case 3 :
            f.width = 0;
            var j$1 = i;
            while((function(j$1){
                return function () {
                  var w = fmt.charCodeAt(j$1) - /* '0' */48 | 0;
                  return w >= 0 && w <= 9;
                }
                }(j$1))()) {
              f.width = (Math.imul(f.width, 10) + fmt.charCodeAt(j$1) | 0) - /* '0' */48 | 0;
              j$1 = j$1 + 1 | 0;
            }          _i = j$1;
            continue ;
        case 4 :
            f.signedconv = true;
            f.base = /* Dec */2;
            _i = i + 1 | 0;
            continue ;
        case 5 :
            f.signedconv = true;
            f.conv = String.fromCharCode(c);
            _i = i + 1 | 0;
            continue ;
        
      }
    }}

  function finish_formatting(config, rawbuffer) {
    var justify = config.justify;
    var signstyle = config.signstyle;
    var filter = config.filter;
    var alternate = config.alternate;
    var base = config.base;
    var signedconv = config.signedconv;
    var width = config.width;
    var uppercase = config.uppercase;
    var sign = config.sign;
    var len = rawbuffer.length;
    if (signedconv && (sign < 0 || signstyle !== "-")) {
      len = len + 1 | 0;
    }
    if (alternate) {
      if (base === /* Oct */0) {
        len = len + 1 | 0;
      } else if (base === /* Hex */1) {
        len = len + 2 | 0;
      }
      
    }
    var buffer = "";
    if (justify === "+" && filter === " ") {
      for(var _for = len; _for < width; ++_for){
        buffer = buffer + filter;
      }
    }
    if (signedconv) {
      if (sign < 0) {
        buffer = buffer + "-";
      } else if (signstyle !== "-") {
        buffer = buffer + signstyle;
      }
      
    }
    if (alternate && base === /* Oct */0) {
      buffer = buffer + "0";
    }
    if (alternate && base === /* Hex */1) {
      buffer = buffer + "0x";
    }
    if (justify === "+" && filter === "0") {
      for(var _for$1 = len; _for$1 < width; ++_for$1){
        buffer = buffer + filter;
      }
    }
    buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;
    if (justify === "-") {
      for(var _for$2 = len; _for$2 < width; ++_for$2){
        buffer = buffer + " ";
      }
    }
    return buffer;
  }

  function caml_format_float(fmt, x) {
    var f = parse_format(fmt);
    var prec = f.prec < 0 ? 6 : f.prec;
    var x$1 = x < 0 ? (f.sign = -1, -x) : x;
    var s = "";
    if (isNaN(x$1)) {
      s = "nan";
      f.filter = " ";
    } else if (isFinite(x$1)) {
      var match = f.conv;
      switch (match) {
        case "e" :
            s = x$1.toExponential(prec);
            var i = s.length;
            if (s[i - 3 | 0] === "e") {
              s = s.slice(0, i - 1 | 0) + ("0" + s.slice(i - 1 | 0));
            }
            break;
        case "f" :
            s = x$1.toFixed(prec);
            break;
        case "g" :
            var prec$1 = prec !== 0 ? prec : 1;
            s = x$1.toExponential(prec$1 - 1 | 0);
            var j = s.indexOf("e");
            var exp = Number(s.slice(j + 1 | 0)) | 0;
            if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {
              var i$1 = j - 1 | 0;
              while(s[i$1] === "0") {
                i$1 = i$1 - 1 | 0;
              }            if (s[i$1] === ".") {
                i$1 = i$1 - 1 | 0;
              }
              s = s.slice(0, i$1 + 1 | 0) + s.slice(j);
              var i$2 = s.length;
              if (s[i$2 - 3 | 0] === "e") {
                s = s.slice(0, i$2 - 1 | 0) + ("0" + s.slice(i$2 - 1 | 0));
              }
              
            } else {
              var p = prec$1;
              if (exp < 0) {
                p = p - (exp + 1 | 0) | 0;
                s = x$1.toFixed(p);
              } else {
                while((function () {
                        s = x$1.toFixed(p);
                        return s.length > (prec$1 + 1 | 0);
                      })()) {
                  p = p - 1 | 0;
                }            }
              if (p !== 0) {
                var k = s.length - 1 | 0;
                while(s[k] === "0") {
                  k = k - 1 | 0;
                }              if (s[k] === ".") {
                  k = k - 1 | 0;
                }
                s = s.slice(0, k + 1 | 0);
              }
              
            }
            break;
          
      }
    } else {
      s = "inf";
      f.filter = " ";
    }
    return finish_formatting(f, s);
  }
  /* No side effect */

  function get$1(s, i) {
    if (i >= s.length || i < 0) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "index out of bounds",
            Error: new Error()
          };
    }
    return s.charCodeAt(i);
  }

  function make$1(n, ch) {
    return String.fromCharCode(ch).repeat(n);
  }
  /* No side effect */

  var id = {
    contents: 0
  };

  function create$1(str) {
    id.contents = id.contents + 1 | 0;
    return str + ("/" + id.contents);
  }

  function caml_is_extension(e) {
    if (e == null) {
      return false;
    } else {
      return typeof e.RE_EXN_ID === "string";
    }
  }
  /* No side effect */

  function some(x) {
    if (x === undefined) {
      return {
              BS_PRIVATE_NESTED_SOME_NONE: 0
            };
    } else if (x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
      return {
              BS_PRIVATE_NESTED_SOME_NONE: x.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
            };
    } else {
      return x;
    }
  }

  function valFromOption(x) {
    if (!(x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== undefined)) {
      return x;
    }
    var depth = x.BS_PRIVATE_NESTED_SOME_NONE;
    if (depth === 0) {
      return ;
    } else {
      return {
              BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
            };
    }
  }
  /* No side effect */

  var $$Error = /* @__PURE__ */create$1("Caml_js_exceptions.Error");

  function internalToOCamlException(e) {
    if (caml_is_extension(e)) {
      return e;
    } else {
      return {
              RE_EXN_ID: $$Error,
              _1: e
            };
    }
  }
  /* No side effect */

  var min_int = -2147483648;

  function valid_float_lexem(s) {
    var l = s.length;
    var _i = 0;
    while(true) {
      var i = _i;
      if (i >= l) {
        return s + ".";
      }
      var match = get$1(s, i);
      if (match >= 48) {
        if (match >= 58) {
          return s;
        }
        _i = i + 1 | 0;
        continue ;
      }
      if (match !== 45) {
        return s;
      }
      _i = i + 1 | 0;
      continue ;
    }}

  function string_of_float(f) {
    return valid_float_lexem(caml_format_float("%.12g", f));
  }

  function $at(l1, l2) {
    if (l1) {
      return {
              hd: l1.hd,
              tl: $at(l1.tl, l2)
            };
    } else {
      return l2;
    }
  }

  var max_int = 2147483647;

  var max_float = 1.79769313486231571e+308;
  /* No side effect */

  function length(l) {
    var _len = 0;
    var _param = l;
    while(true) {
      var param = _param;
      var len = _len;
      if (!param) {
        return len;
      }
      _param = param.tl;
      _len = len + 1 | 0;
      continue ;
    }}

  function rev_append(_l1, _l2) {
    while(true) {
      var l2 = _l2;
      var l1 = _l1;
      if (!l1) {
        return l2;
      }
      _l2 = {
        hd: l1.hd,
        tl: l2
      };
      _l1 = l1.tl;
      continue ;
    }}

  function rev(l) {
    return rev_append(l, /* [] */0);
  }

  function flatten(param) {
    if (param) {
      return $at(param.hd, flatten(param.tl));
    } else {
      return /* [] */0;
    }
  }

  function map$3(f, param) {
    if (!param) {
      return /* [] */0;
    }
    var r = _1(f, param.hd);
    return {
            hd: r,
            tl: map$3(f, param.tl)
          };
  }

  function iter$1(f, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      _1(f, param.hd);
      _param = param.tl;
      continue ;
    }}

  function fold_left(f, _accu, _l) {
    while(true) {
      var l = _l;
      var accu = _accu;
      if (!l) {
        return accu;
      }
      _l = l.tl;
      _accu = _2(f, accu, l.hd);
      continue ;
    }}

  function fold_right$1(f, l, accu) {
    if (l) {
      return _2(f, l.hd, fold_right$1(f, l.tl, accu));
    } else {
      return accu;
    }
  }

  function fold_left2(f, _accu, _l1, _l2) {
    while(true) {
      var l2 = _l2;
      var l1 = _l1;
      var accu = _accu;
      if (l1) {
        if (l2) {
          _l2 = l2.tl;
          _l1 = l1.tl;
          _accu = _3(f, accu, l1.hd, l2.hd);
          continue ;
        }
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "List.fold_left2",
              Error: new Error()
            };
      }
      if (l2) {
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "List.fold_left2",
              Error: new Error()
            };
      }
      return accu;
    }}

  function find_all(p) {
    return function (param) {
      var _accu = /* [] */0;
      var _param = param;
      while(true) {
        var param$1 = _param;
        var accu = _accu;
        if (!param$1) {
          return rev_append(accu, /* [] */0);
        }
        var l = param$1.tl;
        var x = param$1.hd;
        if (_1(p, x)) {
          _param = l;
          _accu = {
            hd: x,
            tl: accu
          };
          continue ;
        }
        _param = l;
        continue ;
      }  };
  }

  function chop(_k, _l) {
    while(true) {
      var l = _l;
      var k = _k;
      if (k === 0) {
        return l;
      }
      if (l) {
        _l = l.tl;
        _k = k - 1 | 0;
        continue ;
      }
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "list.ml",
              262,
              11
            ],
            Error: new Error()
          };
    }}

  function sort_uniq(cmp, l) {
    var sort = function (n, l) {
      if (n !== 2) {
        if (n === 3 && l) {
          var match = l.tl;
          if (match) {
            var match$1 = match.tl;
            if (match$1) {
              var x3 = match$1.hd;
              var x2 = match.hd;
              var x1 = l.hd;
              var c = _2(cmp, x1, x2);
              if (c === 0) {
                var c$1 = _2(cmp, x2, x3);
                if (c$1 === 0) {
                  return {
                          hd: x2,
                          tl: /* [] */0
                        };
                } else if (c$1 < 0) {
                  return {
                          hd: x2,
                          tl: {
                            hd: x3,
                            tl: /* [] */0
                          }
                        };
                } else {
                  return {
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        };
                }
              }
              if (c < 0) {
                var c$2 = _2(cmp, x2, x3);
                if (c$2 === 0) {
                  return {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        };
                }
                if (c$2 < 0) {
                  return {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: {
                              hd: x3,
                              tl: /* [] */0
                            }
                          }
                        };
                }
                var c$3 = _2(cmp, x1, x3);
                if (c$3 === 0) {
                  return {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        };
                } else if (c$3 < 0) {
                  return {
                          hd: x1,
                          tl: {
                            hd: x3,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        };
                } else {
                  return {
                          hd: x3,
                          tl: {
                            hd: x1,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        };
                }
              }
              var c$4 = _2(cmp, x1, x3);
              if (c$4 === 0) {
                return {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      };
              }
              if (c$4 < 0) {
                return {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: {
                            hd: x3,
                            tl: /* [] */0
                          }
                        }
                      };
              }
              var c$5 = _2(cmp, x2, x3);
              if (c$5 === 0) {
                return {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      };
              } else if (c$5 < 0) {
                return {
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: {
                            hd: x1,
                            tl: /* [] */0
                          }
                        }
                      };
              } else {
                return {
                        hd: x3,
                        tl: {
                          hd: x2,
                          tl: {
                            hd: x1,
                            tl: /* [] */0
                          }
                        }
                      };
              }
            }
            
          }
          
        }
        
      } else if (l) {
        var match$2 = l.tl;
        if (match$2) {
          var x2$1 = match$2.hd;
          var x1$1 = l.hd;
          var c$6 = _2(cmp, x1$1, x2$1);
          if (c$6 === 0) {
            return {
                    hd: x1$1,
                    tl: /* [] */0
                  };
          } else if (c$6 < 0) {
            return {
                    hd: x1$1,
                    tl: {
                      hd: x2$1,
                      tl: /* [] */0
                    }
                  };
          } else {
            return {
                    hd: x2$1,
                    tl: {
                      hd: x1$1,
                      tl: /* [] */0
                    }
                  };
          }
        }
        
      }
      var n1 = (n >> 1);
      var n2 = n - n1 | 0;
      var l2 = chop(n1, l);
      var s1 = rev_sort(n1, l);
      var s2 = rev_sort(n2, l2);
      var _l1 = s1;
      var _l2 = s2;
      var _accu = /* [] */0;
      while(true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1 = _l1;
        if (!l1) {
          return rev_append(l2$1, accu);
        }
        if (!l2$1) {
          return rev_append(l1, accu);
        }
        var t2 = l2$1.tl;
        var h2 = l2$1.hd;
        var t1 = l1.tl;
        var h1 = l1.hd;
        var c$7 = _2(cmp, h1, h2);
        if (c$7 === 0) {
          _accu = {
            hd: h1,
            tl: accu
          };
          _l2 = t2;
          _l1 = t1;
          continue ;
        }
        if (c$7 > 0) {
          _accu = {
            hd: h1,
            tl: accu
          };
          _l1 = t1;
          continue ;
        }
        _accu = {
          hd: h2,
          tl: accu
        };
        _l2 = t2;
        continue ;
      }  };
    var rev_sort = function (n, l) {
      if (n !== 2) {
        if (n === 3 && l) {
          var match = l.tl;
          if (match) {
            var match$1 = match.tl;
            if (match$1) {
              var x3 = match$1.hd;
              var x2 = match.hd;
              var x1 = l.hd;
              var c = _2(cmp, x1, x2);
              if (c === 0) {
                var c$1 = _2(cmp, x2, x3);
                if (c$1 === 0) {
                  return {
                          hd: x2,
                          tl: /* [] */0
                        };
                } else if (c$1 > 0) {
                  return {
                          hd: x2,
                          tl: {
                            hd: x3,
                            tl: /* [] */0
                          }
                        };
                } else {
                  return {
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        };
                }
              }
              if (c > 0) {
                var c$2 = _2(cmp, x2, x3);
                if (c$2 === 0) {
                  return {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        };
                }
                if (c$2 > 0) {
                  return {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: {
                              hd: x3,
                              tl: /* [] */0
                            }
                          }
                        };
                }
                var c$3 = _2(cmp, x1, x3);
                if (c$3 === 0) {
                  return {
                          hd: x1,
                          tl: {
                            hd: x2,
                            tl: /* [] */0
                          }
                        };
                } else if (c$3 > 0) {
                  return {
                          hd: x1,
                          tl: {
                            hd: x3,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        };
                } else {
                  return {
                          hd: x3,
                          tl: {
                            hd: x1,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        };
                }
              }
              var c$4 = _2(cmp, x1, x3);
              if (c$4 === 0) {
                return {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      };
              }
              if (c$4 > 0) {
                return {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: {
                            hd: x3,
                            tl: /* [] */0
                          }
                        }
                      };
              }
              var c$5 = _2(cmp, x2, x3);
              if (c$5 === 0) {
                return {
                        hd: x2,
                        tl: {
                          hd: x1,
                          tl: /* [] */0
                        }
                      };
              } else if (c$5 > 0) {
                return {
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: {
                            hd: x1,
                            tl: /* [] */0
                          }
                        }
                      };
              } else {
                return {
                        hd: x3,
                        tl: {
                          hd: x2,
                          tl: {
                            hd: x1,
                            tl: /* [] */0
                          }
                        }
                      };
              }
            }
            
          }
          
        }
        
      } else if (l) {
        var match$2 = l.tl;
        if (match$2) {
          var x2$1 = match$2.hd;
          var x1$1 = l.hd;
          var c$6 = _2(cmp, x1$1, x2$1);
          if (c$6 === 0) {
            return {
                    hd: x1$1,
                    tl: /* [] */0
                  };
          } else if (c$6 > 0) {
            return {
                    hd: x1$1,
                    tl: {
                      hd: x2$1,
                      tl: /* [] */0
                    }
                  };
          } else {
            return {
                    hd: x2$1,
                    tl: {
                      hd: x1$1,
                      tl: /* [] */0
                    }
                  };
          }
        }
        
      }
      var n1 = (n >> 1);
      var n2 = n - n1 | 0;
      var l2 = chop(n1, l);
      var s1 = sort(n1, l);
      var s2 = sort(n2, l2);
      var _l1 = s1;
      var _l2 = s2;
      var _accu = /* [] */0;
      while(true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1 = _l1;
        if (!l1) {
          return rev_append(l2$1, accu);
        }
        if (!l2$1) {
          return rev_append(l1, accu);
        }
        var t2 = l2$1.tl;
        var h2 = l2$1.hd;
        var t1 = l1.tl;
        var h1 = l1.hd;
        var c$7 = _2(cmp, h1, h2);
        if (c$7 === 0) {
          _accu = {
            hd: h1,
            tl: accu
          };
          _l2 = t2;
          _l1 = t1;
          continue ;
        }
        if (c$7 < 0) {
          _accu = {
            hd: h1,
            tl: accu
          };
          _l1 = t1;
          continue ;
        }
        _accu = {
          hd: h2,
          tl: accu
        };
        _l2 = t2;
        continue ;
      }  };
    var len = length(l);
    if (len < 2) {
      return l;
    } else {
      return sort(len, l);
    }
  }

  var append = $at;

  var filter$1 = find_all;
  /* No side effect */

  function sub$1(s, ofs, len) {
    if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "String.sub / Bytes.sub",
            Error: new Error()
          };
    }
    var r = caml_create_bytes(len);
    caml_blit_bytes(s, ofs, r, 0, len);
    return r;
  }
  /* No side effect */

  function sub(s, ofs, len) {
    return bytes_to_string(sub$1(bytes_of_string(s), ofs, len));
  }

  function ensure_ge(x, y) {
    if (x >= y) {
      return x;
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "String.concat",
          Error: new Error()
        };
  }

  function sum_lengths(_acc, seplen, _param) {
    while(true) {
      var param = _param;
      var acc = _acc;
      if (!param) {
        return acc;
      }
      var tl = param.tl;
      var hd = param.hd;
      if (!tl) {
        return hd.length + acc | 0;
      }
      _param = tl;
      _acc = ensure_ge((hd.length + seplen | 0) + acc | 0, acc);
      continue ;
    }}

  function unsafe_blits(dst, _pos, sep, seplen, _param) {
    while(true) {
      var param = _param;
      var pos = _pos;
      if (!param) {
        return dst;
      }
      var tl = param.tl;
      var hd = param.hd;
      if (tl) {
        caml_blit_string(hd, 0, dst, pos, hd.length);
        caml_blit_string(sep, 0, dst, pos + hd.length | 0, seplen);
        _param = tl;
        _pos = (pos + hd.length | 0) + seplen | 0;
        continue ;
      }
      caml_blit_string(hd, 0, dst, pos, hd.length);
      return dst;
    }}

  function concat$1(sep, l) {
    if (!l) {
      return "";
    }
    var seplen = sep.length;
    return bytes_to_string(unsafe_blits(caml_create_bytes(sum_lengths(0, seplen, l)), 0, sep, seplen, l));
  }

  var make = make$1;
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function createElementNsOptional(namespace, tagName) {
    if (namespace === "") {
      return document.createElement(tagName);
    } else {
      return document.createElementNS(namespace, tagName);
    }
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  var noNode$1 = {
    TAG: /* CommentNode */0,
    _0: ""
  };

  function fullnode(namespace, tagName, key, unique, props, vdoms) {
    return {
            TAG: /* Node */2,
            _0: namespace,
            _1: tagName,
            _2: key,
            _3: unique,
            _4: props,
            _5: vdoms
          };
  }

  function onMsg(name, msg) {
    return {
            TAG: /* Event */3,
            _0: name,
            _1: {
              TAG: /* EventHandlerMsg */1,
              _0: msg
            },
            _2: {
              contents: undefined
            }
          };
  }

  function renderToHtmlString(_s) {
    while(true) {
      var s = _s;
      switch (s.TAG | 0) {
        case /* CommentNode */0 :
            return "<!-- " + (s._0 + " -->");
        case /* Text */1 :
            return s._0;
        case /* Node */2 :
            var tagName = s._1;
            var namespace = s._0;
            return concat$1("", {
                        hd: "<",
                        tl: {
                          hd: namespace,
                          tl: {
                            hd: namespace === "" ? "" : ":",
                            tl: {
                              hd: tagName,
                              tl: {
                                hd: concat$1("", map$3((function (p) {
                                            if (typeof p === "number") {
                                              return "";
                                            }
                                            switch (p.TAG | 0) {
                                              case /* RawProp */0 :
                                                  return concat$1("", {
                                                              hd: " ",
                                                              tl: {
                                                                hd: p._0,
                                                                tl: {
                                                                  hd: "=\"",
                                                                  tl: {
                                                                    hd: p._1,
                                                                    tl: {
                                                                      hd: "\"",
                                                                      tl: /* [] */0
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            });
                                              case /* Attribute */1 :
                                                  return concat$1("", {
                                                              hd: " ",
                                                              tl: {
                                                                hd: p._1,
                                                                tl: {
                                                                  hd: "=\"",
                                                                  tl: {
                                                                    hd: p._2,
                                                                    tl: {
                                                                      hd: "\"",
                                                                      tl: /* [] */0
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            });
                                              case /* Data */2 :
                                                  return concat$1("", {
                                                              hd: " data-",
                                                              tl: {
                                                                hd: p._0,
                                                                tl: {
                                                                  hd: "=\"",
                                                                  tl: {
                                                                    hd: p._1,
                                                                    tl: {
                                                                      hd: "\"",
                                                                      tl: /* [] */0
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            });
                                              case /* Event */3 :
                                                  return "";
                                              case /* Style */4 :
                                                  return concat$1("", {
                                                              hd: " style=\"",
                                                              tl: {
                                                                hd: concat$1(";", map$3((function (param) {
                                                                            return concat$1("", {
                                                                                        hd: param[0],
                                                                                        tl: {
                                                                                          hd: ":",
                                                                                          tl: {
                                                                                            hd: param[1],
                                                                                            tl: {
                                                                                              hd: ";",
                                                                                              tl: /* [] */0
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      });
                                                                          }), p._0)),
                                                                tl: {
                                                                  hd: "\"",
                                                                  tl: /* [] */0
                                                                }
                                                              }
                                                            });
                                              
                                            }
                                          }), s._4)),
                                tl: {
                                  hd: ">",
                                  tl: {
                                    hd: concat$1("", map$3(renderToHtmlString, s._5)),
                                    tl: {
                                      hd: "</",
                                      tl: {
                                        hd: tagName,
                                        tl: {
                                          hd: ">",
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      });
        case /* LazyGen */3 :
            _s = _1(s._1, undefined);
            continue ;
        case /* Tagger */4 :
            _s = s._1;
            continue ;
        
      }
    }}

  function eventHandler(callbacks, cb) {
    return function (ev) {
      var msg = _1(cb.contents, ev);
      if (msg !== undefined) {
        return _1(callbacks.contents.enqueue, valFromOption(msg));
      }
      
    };
  }

  function eventHandler_GetCB(msg) {
    if (msg.TAG === /* EventHandlerCallback */0) {
      return msg._1;
    }
    var msg$1 = msg._0;
    return function (_ev) {
      return some(msg$1);
    };
  }

  function compareEventHandlerTypes(left, msg) {
    if (msg.TAG === /* EventHandlerCallback */0) {
      if (left.TAG === /* EventHandlerCallback */0) {
        return msg._0 === left._0;
      } else {
        return false;
      }
    } else if (left.TAG === /* EventHandlerCallback */0 || !caml_equal(msg._0, left._0)) {
      return false;
    } else {
      return true;
    }
  }

  function eventHandler_Register(callbacks, elem, name, handlerType) {
    var cb = {
      contents: eventHandler_GetCB(handlerType)
    };
    var handler = eventHandler(callbacks, cb);
    addEventListener(elem, name, handler, false);
    return {
            handler: handler,
            cb: cb
          };
  }

  function eventHandler_Unregister(elem, name, cache) {
    if (cache !== undefined) {
      removeEventListener(elem, name, cache.handler, false);
      return ;
    }
    
  }

  function eventHandler_Mutate(callbacks, elem, oldName, newName, oldHandlerType, newHandlerType, oldCache, newCache) {
    var oldcache = oldCache.contents;
    if (oldcache === undefined) {
      newCache.contents = eventHandler_Register(callbacks, elem, newName, newHandlerType);
      return ;
    }
    if (oldName === newName) {
      newCache.contents = oldCache.contents;
      if (compareEventHandlerTypes(oldHandlerType, newHandlerType)) {
        return ;
      }
      var cb = eventHandler_GetCB(newHandlerType);
      oldcache.cb.contents = cb;
      return ;
    }
    oldCache.contents = eventHandler_Unregister(elem, oldName, oldCache.contents);
    newCache.contents = eventHandler_Register(callbacks, elem, newName, newHandlerType);
    
  }

  function patchVNodesOnElems_PropertiesApply_Add(callbacks, elem, _idx, s) {
    if (typeof s === "number") {
      return ;
    }
    switch (s.TAG | 0) {
      case /* RawProp */0 :
          elem[s._0] = s._1;
          return ;
      case /* Attribute */1 :
          return setAttributeNsOptional(elem, s._0, s._1, s._2);
      case /* Data */2 :
          console.log([
                "TODO:  Add Data Unhandled",
                s._0,
                s._1
              ]);
          throw {
                RE_EXN_ID: "Failure",
                _1: "TODO:  Add Data Unhandled",
                Error: new Error()
              };
      case /* Event */3 :
          s._2.contents = eventHandler_Register(callbacks, elem, s._0, s._1);
          return ;
      case /* Style */4 :
          return fold_left((function (param, param$1) {
                        return setStyleProperty(elem, undefined, param$1[0], param$1[1]);
                      }), undefined, s._0);
      
    }
  }

  function patchVNodesOnElems_PropertiesApply_Remove(_callbacks, elem, _idx, s) {
    if (typeof s === "number") {
      return ;
    }
    switch (s.TAG | 0) {
      case /* RawProp */0 :
          elem[s._0] = undefined;
          return ;
      case /* Attribute */1 :
          return removeAttributeNsOptional(elem, s._0, s._1);
      case /* Data */2 :
          console.log([
                "TODO:  Remove Data Unhandled",
                s._0,
                s._1
              ]);
          throw {
                RE_EXN_ID: "Failure",
                _1: "TODO:  Remove Data Unhandled",
                Error: new Error()
              };
      case /* Event */3 :
          var cache = s._2;
          cache.contents = eventHandler_Unregister(elem, s._0, cache.contents);
          return ;
      case /* Style */4 :
          return fold_left((function (param, param$1) {
                        return setStyleProperty(elem, undefined, param$1[0], null);
                      }), undefined, s._0);
      
    }
  }

  function patchVNodesOnElems_PropertiesApply_RemoveAdd(callbacks, elem, idx, oldProp, newProp) {
    patchVNodesOnElems_PropertiesApply_Remove(callbacks, elem, idx, oldProp);
    patchVNodesOnElems_PropertiesApply_Add(callbacks, elem, idx, newProp);
    
  }

  function patchVNodesOnElems_PropertiesApply_Mutate(_callbacks, elem, _idx, oldProp, _newProp) {
    if (typeof _newProp === "number") {
      throw {
            RE_EXN_ID: "Failure",
            _1: "This should never be called as all entries through NoProp are gated.",
            Error: new Error()
          };
    }
    switch (_newProp.TAG | 0) {
      case /* RawProp */0 :
          elem[_newProp._0] = _newProp._1;
          return ;
      case /* Attribute */1 :
          return setAttributeNsOptional(elem, _newProp._0, _newProp._1, _newProp._2);
      case /* Data */2 :
          console.log([
                "TODO:  Mutate Data Unhandled",
                _newProp._0,
                _newProp._1
              ]);
          throw {
                RE_EXN_ID: "Failure",
                _1: "TODO:  Mutate Data Unhandled",
                Error: new Error()
              };
      case /* Event */3 :
          throw {
                RE_EXN_ID: "Failure",
                _1: "This will never be called because it is gated",
                Error: new Error()
              };
      case /* Style */4 :
          if (typeof oldProp === "number") {
            throw {
                  RE_EXN_ID: "Failure",
                  _1: "Passed a non-Style to a new Style as a Mutations while the old Style is not actually a style!",
                  Error: new Error()
                };
          }
          if (oldProp.TAG === /* Style */4) {
            return fold_left2((function (param, param$1, param$2) {
                          var nv = param$2[1];
                          var nk = param$2[0];
                          var ok = param$1[0];
                          if (ok === nk) {
                            if (param$1[1] === nv) {
                              return ;
                            } else {
                              return setStyleProperty(elem, undefined, nk, nv);
                            }
                          } else {
                            setStyleProperty(elem, undefined, ok, null);
                            return setStyleProperty(elem, undefined, nk, nv);
                          }
                        }), undefined, oldProp._0, _newProp._0);
          }
          throw {
                RE_EXN_ID: "Failure",
                _1: "Passed a non-Style to a new Style as a Mutations while the old Style is not actually a style!",
                Error: new Error()
              };
      
    }
  }

  function patchVNodesOnElems_PropertiesApply(callbacks, elem, _idx, _oldProperties, _newProperties) {
    while(true) {
      var newProperties = _newProperties;
      var oldProperties = _oldProperties;
      var idx = _idx;
      if (!oldProperties) {
        if (newProperties) {
          return false;
        } else {
          return true;
        }
      }
      var _oldProp = oldProperties.hd;
      if (!newProperties) {
        return false;
      }
      if (typeof _oldProp === "number") {
        if (typeof newProperties.hd === "number") {
          _newProperties = newProperties.tl;
          _oldProperties = oldProperties.tl;
          _idx = idx + 1 | 0;
          continue ;
        }
        
      } else {
        switch (_oldProp.TAG | 0) {
          case /* RawProp */0 :
              var newProp = newProperties.hd;
              if (typeof newProp !== "number" && newProp.TAG === /* RawProp */0) {
                if (_oldProp._0 === newProp._0 && _oldProp._1 === newProp._1) ; else {
                  patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp);
                }
                _newProperties = newProperties.tl;
                _oldProperties = oldProperties.tl;
                _idx = idx + 1 | 0;
                continue ;
              }
              break;
          case /* Attribute */1 :
              var newProp$1 = newProperties.hd;
              if (typeof newProp$1 !== "number" && newProp$1.TAG === /* Attribute */1) {
                if (_oldProp._0 === newProp$1._0 && _oldProp._1 === newProp$1._1 && _oldProp._2 === newProp$1._2) ; else {
                  patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$1);
                }
                _newProperties = newProperties.tl;
                _oldProperties = oldProperties.tl;
                _idx = idx + 1 | 0;
                continue ;
              }
              break;
          case /* Data */2 :
              var newProp$2 = newProperties.hd;
              if (typeof newProp$2 !== "number" && newProp$2.TAG === /* Data */2) {
                if (_oldProp._0 === newProp$2._0 && _oldProp._1 === newProp$2._1) ; else {
                  patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$2);
                }
                _newProperties = newProperties.tl;
                _oldProperties = oldProperties.tl;
                _idx = idx + 1 | 0;
                continue ;
              }
              break;
          case /* Event */3 :
              var _newProp = newProperties.hd;
              if (typeof _newProp !== "number" && _newProp.TAG === /* Event */3) {
                eventHandler_Mutate(callbacks, elem, _oldProp._0, _newProp._0, _oldProp._1, _newProp._1, _oldProp._2, _newProp._2);
                _newProperties = newProperties.tl;
                _oldProperties = oldProperties.tl;
                _idx = idx + 1 | 0;
                continue ;
              }
              break;
          case /* Style */4 :
              var newProp$3 = newProperties.hd;
              if (typeof newProp$3 !== "number" && newProp$3.TAG === /* Style */4) {
                if (caml_equal(_oldProp._0, newProp$3._0)) ; else {
                  patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$3);
                }
                _newProperties = newProperties.tl;
                _oldProperties = oldProperties.tl;
                _idx = idx + 1 | 0;
                continue ;
              }
              break;
          
        }
      }
      patchVNodesOnElems_PropertiesApply_RemoveAdd(callbacks, elem, idx, _oldProp, newProperties.hd);
      _newProperties = newProperties.tl;
      _oldProperties = oldProperties.tl;
      _idx = idx + 1 | 0;
      continue ;
    }}

  function patchVNodesOnElems_Properties(callbacks, elem, oldProperties, newProperties) {
    return patchVNodesOnElems_PropertiesApply(callbacks, elem, 0, oldProperties, newProperties);
  }

  function patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, param) {
    if (param.TAG === /* Node */2) {
      var newProperties = param._4;
      var oldChild = get$2(elems, idx);
      var newChild = createElementNsOptional(param._0, param._1);
      var match = patchVNodesOnElems_Properties(callbacks, newChild, map$3((function (param) {
                  return /* NoProp */0;
                }), newProperties), newProperties);
      if (match) {
        var childChildren = newChild.childNodes;
        patchVNodesOnElems(callbacks, newChild, childChildren, 0, /* [] */0, param._5);
        insertBefore(elem, newChild, oldChild);
        elem.removeChild(oldChild);
        return ;
      }
      throw {
            RE_EXN_ID: "Match_failure",
            _1: [
              "vdom.ml",
              343,
              13
            ],
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: "Failure",
          _1: "Node replacement should never be passed anything but a node itself",
          Error: new Error()
        };
  }

  function patchVNodesOnElems_CreateElement(_callbacks, _s) {
    while(true) {
      var s = _s;
      var callbacks = _callbacks;
      switch (s.TAG | 0) {
        case /* CommentNode */0 :
            var text = s._0;
            return document.createComment(text);
        case /* Text */1 :
            var text$1 = s._0;
            return document.createTextNode(text$1);
        case /* Node */2 :
            var newProperties = s._4;
            var newChild = createElementNsOptional(s._0, s._1);
            var match = patchVNodesOnElems_Properties(callbacks, newChild, map$3((function (param) {
                        return /* NoProp */0;
                      }), newProperties), newProperties);
            if (match) {
              var childChildren = newChild.childNodes;
              patchVNodesOnElems(callbacks, newChild, childChildren, 0, /* [] */0, s._5);
              return newChild;
            }
            throw {
                  RE_EXN_ID: "Match_failure",
                  _1: [
                    "vdom.ml",
                    368,
                    11
                  ],
                  Error: new Error()
                };
        case /* LazyGen */3 :
            var vdom = _1(s._1, undefined);
            s._2.contents = vdom;
            _s = vdom;
            continue ;
        case /* Tagger */4 :
            _s = s._1;
            _callbacks = _1(s._0, callbacks);
            continue ;
        
      }
    }}

  function patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode) {
    if (oldNode.TAG === /* Node */2) {
      if (newNode.TAG === /* Node */2) {
        if (oldNode._3 !== newNode._3 || oldNode._1 !== newNode._1) {
          return patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, newNode);
        }
        var child = get$2(elems, idx);
        var childChildren = child.childNodes;
        if (patchVNodesOnElems_Properties(callbacks, child, oldNode._4, newNode._4)) ; else {
          console.log("VDom:  Failed swapping properties because the property list length changed, use `noProp` to swap properties instead, not by altering the list structure.  This is a massive inefficiency until this issue is resolved.");
          patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, newNode);
        }
        return patchVNodesOnElems(callbacks, child, childChildren, 0, oldNode._5, newNode._5);
      }
      throw {
            RE_EXN_ID: "Failure",
            _1: "Non-node passed to patchVNodesOnElems_MutateNode",
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: "Failure",
          _1: "Non-node passed to patchVNodesOnElems_MutateNode",
          Error: new Error()
        };
  }

  function patchVNodesOnElems(callbacks, elem, elems, _idx, _oldVNodes, _newVNodes) {
    while(true) {
      var newVNodes = _newVNodes;
      var oldVNodes = _oldVNodes;
      var idx = _idx;
      if (oldVNodes) {
        var oldNode = oldVNodes.hd;
        switch (oldNode.TAG | 0) {
          case /* CommentNode */0 :
              if (newVNodes) {
                var newS = newVNodes.hd;
                if (newS.TAG === /* CommentNode */0 && oldNode._0 === newS._0) {
                  _newVNodes = newVNodes.tl;
                  _oldVNodes = oldVNodes.tl;
                  _idx = idx + 1 | 0;
                  continue ;
                }
                
              }
              break;
          case /* Text */1 :
              if (newVNodes) {
                var newText = newVNodes.hd;
                if (newText.TAG === /* Text */1) {
                  var newText$1 = newText._0;
                  if (oldNode._0 !== newText$1) {
                    var child = get$2(elems, idx);
                    child.nodeValue = newText$1;
                  }
                  _newVNodes = newVNodes.tl;
                  _oldVNodes = oldVNodes.tl;
                  _idx = idx + 1 | 0;
                  continue ;
                }
                
              }
              break;
          case /* Node */2 :
              if (newVNodes) {
                var newNode = newVNodes.hd;
                if (newNode.TAG === /* Node */2) {
                  var newRest = newVNodes.tl;
                  var newKey = newNode._2;
                  var newTagName = newNode._1;
                  var newNamespace = newNode._0;
                  var oldRest = oldVNodes.tl;
                  var oldKey = oldNode._2;
                  var oldTagName = oldNode._1;
                  var oldNamespace = oldNode._0;
                  if (oldKey === newKey && oldKey !== "") {
                    _newVNodes = newRest;
                    _oldVNodes = oldRest;
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  if (oldKey === "" || newKey === "") {
                    patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode);
                    _newVNodes = newRest;
                    _oldVNodes = oldRest;
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  var exit = 0;
                  var exit$1 = 0;
                  if (oldRest) {
                    var match = oldRest.hd;
                    if (match.TAG === /* Node */2) {
                      var olderRest = oldRest.tl;
                      var olderKey = match._2;
                      var olderTagName = match._1;
                      var olderNamespace = match._0;
                      var exit$2 = 0;
                      if (newRest) {
                        var match$1 = newRest.hd;
                        if (match$1.TAG === /* Node */2) {
                          if (olderNamespace === newNamespace && olderTagName === newTagName && olderKey === newKey && oldNamespace === match$1._0 && oldTagName === match$1._1 && oldKey === match$1._2) {
                            var firstChild = get$2(elems, idx);
                            var secondChild = get$2(elems, idx + 1 | 0);
                            elem.removeChild(secondChild);
                            insertBefore(elem, secondChild, firstChild);
                            _newVNodes = newRest.tl;
                            _oldVNodes = olderRest;
                            _idx = idx + 2 | 0;
                            continue ;
                          }
                          exit$2 = 4;
                        } else {
                          exit$2 = 4;
                        }
                      } else {
                        exit$2 = 4;
                      }
                      if (exit$2 === 4) {
                        if (olderNamespace === newNamespace && olderTagName === newTagName && olderKey === newKey) {
                          var oldChild = get$2(elems, idx);
                          elem.removeChild(oldChild);
                          _newVNodes = newRest;
                          _oldVNodes = olderRest;
                          _idx = idx + 1 | 0;
                          continue ;
                        }
                        exit$1 = 3;
                      }
                      
                    } else {
                      exit$1 = 3;
                    }
                  } else {
                    exit$1 = 3;
                  }
                  if (exit$1 === 3) {
                    if (newRest) {
                      var match$2 = newRest.hd;
                      if (match$2.TAG === /* Node */2) {
                        if (oldNamespace === match$2._0 && oldTagName === match$2._1 && oldKey === match$2._2) {
                          var oldChild$1 = get$2(elems, idx);
                          var newChild = patchVNodesOnElems_CreateElement(callbacks, newNode);
                          insertBefore(elem, newChild, oldChild$1);
                          _newVNodes = newRest;
                          _idx = idx + 1 | 0;
                          continue ;
                        }
                        exit = 2;
                      } else {
                        exit = 2;
                      }
                    } else {
                      exit = 2;
                    }
                  }
                  if (exit === 2) {
                    patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode);
                    _newVNodes = newRest;
                    _oldVNodes = oldRest;
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  
                }
                
              }
              break;
          case /* LazyGen */3 :
              if (newVNodes) {
                var match$3 = newVNodes.hd;
                if (match$3.TAG === /* LazyGen */3) {
                  var newRest$1 = newVNodes.tl;
                  var newCache = match$3._2;
                  var newGen = match$3._1;
                  var newKey$1 = match$3._0;
                  var oldRest$1 = oldVNodes.tl;
                  var oldCache = oldNode._2;
                  var oldKey$1 = oldNode._0;
                  if (oldKey$1 === newKey$1) {
                    newCache.contents = oldCache.contents;
                    _newVNodes = newRest$1;
                    _oldVNodes = oldRest$1;
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  var exit$3 = 0;
                  var exit$4 = 0;
                  if (oldRest$1) {
                    var match$4 = oldRest$1.hd;
                    if (match$4.TAG === /* LazyGen */3) {
                      var olderRest$1 = oldRest$1.tl;
                      var olderKey$1 = match$4._0;
                      var exit$5 = 0;
                      if (newRest$1) {
                        var match$5 = newRest$1.hd;
                        if (match$5.TAG === /* LazyGen */3) {
                          if (olderKey$1 === newKey$1 && oldKey$1 === match$5._0) {
                            var firstChild$1 = get$2(elems, idx);
                            var secondChild$1 = get$2(elems, idx + 1 | 0);
                            elem.removeChild(secondChild$1);
                            insertBefore(elem, secondChild$1, firstChild$1);
                            _newVNodes = newRest$1.tl;
                            _oldVNodes = olderRest$1;
                            _idx = idx + 2 | 0;
                            continue ;
                          }
                          exit$5 = 4;
                        } else {
                          exit$5 = 4;
                        }
                      } else {
                        exit$5 = 4;
                      }
                      if (exit$5 === 4) {
                        if (olderKey$1 === newKey$1) {
                          var oldChild$2 = get$2(elems, idx);
                          elem.removeChild(oldChild$2);
                          var oldVdom = match$4._2.contents;
                          newCache.contents = oldVdom;
                          _newVNodes = newRest$1;
                          _oldVNodes = olderRest$1;
                          _idx = idx + 1 | 0;
                          continue ;
                        }
                        exit$4 = 3;
                      }
                      
                    } else {
                      exit$4 = 3;
                    }
                  } else {
                    exit$4 = 3;
                  }
                  if (exit$4 === 3) {
                    if (newRest$1) {
                      var match$6 = newRest$1.hd;
                      if (match$6.TAG === /* LazyGen */3) {
                        if (match$6._0 === oldKey$1) {
                          var oldChild$3 = get$2(elems, idx);
                          var newVdom = _1(newGen, undefined);
                          newCache.contents = newVdom;
                          var newChild$1 = patchVNodesOnElems_CreateElement(callbacks, newVdom);
                          insertBefore(elem, newChild$1, oldChild$3);
                          _newVNodes = newRest$1;
                          _idx = idx + 1 | 0;
                          continue ;
                        }
                        exit$3 = 2;
                      } else {
                        exit$3 = 2;
                      }
                    } else {
                      exit$3 = 2;
                    }
                  }
                  if (exit$3 === 2) {
                    var oldVdom$1 = oldCache.contents;
                    var newVdom$1 = _1(newGen, undefined);
                    newCache.contents = newVdom$1;
                    _newVNodes = {
                      hd: newVdom$1,
                      tl: newRest$1
                    };
                    _oldVNodes = {
                      hd: oldVdom$1,
                      tl: oldRest$1
                    };
                    continue ;
                  }
                  
                }
                
              }
              break;
          case /* Tagger */4 :
              _oldVNodes = {
                hd: oldNode._1,
                tl: oldVNodes.tl
              };
              continue ;
          
        }
        var oldRest$2 = oldVNodes.tl;
        if (newVNodes) {
          var newNode$1 = newVNodes.hd;
          if (newNode$1.TAG === /* Tagger */4) {
            patchVNodesOnElems(_1(newNode$1._0, callbacks), elem, elems, idx, {
                  hd: oldNode,
                  tl: /* [] */0
                }, {
                  hd: newNode$1._1,
                  tl: /* [] */0
                });
            _newVNodes = newVNodes.tl;
            _oldVNodes = oldRest$2;
            _idx = idx + 1 | 0;
            continue ;
          }
          var oldChild$4 = get$2(elems, idx);
          var newChild$2 = patchVNodesOnElems_CreateElement(callbacks, newNode$1);
          insertBefore(elem, newChild$2, oldChild$4);
          elem.removeChild(oldChild$4);
          _newVNodes = newVNodes.tl;
          _oldVNodes = oldRest$2;
          _idx = idx + 1 | 0;
          continue ;
        }
        var child$1 = get$2(elems, idx);
        elem.removeChild(child$1);
        _newVNodes = /* [] */0;
        _oldVNodes = oldRest$2;
        continue ;
      }
      if (!newVNodes) {
        return ;
      }
      var newChild$3 = patchVNodesOnElems_CreateElement(callbacks, newVNodes.hd);
      elem.appendChild(newChild$3);
      _newVNodes = newVNodes.tl;
      _oldVNodes = /* [] */0;
      _idx = idx + 1 | 0;
      continue ;
    }}

  function patchVNodesIntoElement(callbacks, elem, oldVNodes, newVNodes) {
    var elems = elem.childNodes;
    patchVNodesOnElems(callbacks, elem, elems, 0, oldVNodes, newVNodes);
    return newVNodes;
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function batch$1(cmds) {
    return {
            TAG: /* Batch */1,
            _0: cmds
          };
  }

  function run$1(_callbacks, _cmds) {
    while(true) {
      var cmds = _cmds;
      var callbacks = _callbacks;
      if (typeof cmds === "number") {
        return ;
      }
      switch (cmds.TAG | 0) {
        case /* Mapper */0 :
            var subCallbacks = _1(cmds._0, callbacks);
            _cmds = cmds._1;
            _callbacks = subCallbacks;
            continue ;
        case /* Batch */1 :
            return fold_left((function(callbacks){
                      return function (param, cmd) {
                        return run$1(callbacks, cmd);
                      }
                      }(callbacks)), undefined, cmds._0);
        case /* EnqueueCall */2 :
            return _1(cmds._0, callbacks);
        
      }
    }}

  var none = /* NoCmd */0;
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function batch(subs) {
    return {
            TAG: /* Batch */0,
            _0: subs
          };
  }

  function registration(key, enableCall) {
    return {
            TAG: /* Registration */1,
            _0: key,
            _1: (function (callbacks) {
                return _1(enableCall, callbacks.contents);
              }),
            _2: {
              contents: undefined
            }
          };
  }

  function run(oldCallbacks, newCallbacks, oldSub, newSub) {
    var enable = function (_callbacks, _subs) {
      while(true) {
        var subs = _subs;
        var callbacks = _callbacks;
        if (typeof subs === "number") {
          return ;
        }
        switch (subs.TAG | 0) {
          case /* Batch */0 :
              var subs$1 = subs._0;
              if (subs$1) {
                return iter$1((function(callbacks){
                          return function (param) {
                            return enable(callbacks, param);
                          }
                          }(callbacks)), subs$1);
              } else {
                return ;
              }
          case /* Registration */1 :
              subs._2.contents = _1(subs._1, callbacks);
              return ;
          case /* Mapper */2 :
              var subCallbacks = _1(subs._0, callbacks);
              _subs = subs._1;
              _callbacks = subCallbacks;
              continue ;
          
        }
      }  };
    var disable = function (_callbacks, _subs) {
      while(true) {
        var subs = _subs;
        var callbacks = _callbacks;
        if (typeof subs === "number") {
          return ;
        }
        switch (subs.TAG | 0) {
          case /* Batch */0 :
              var subs$1 = subs._0;
              if (subs$1) {
                return iter$1((function(callbacks){
                          return function (param) {
                            return disable(callbacks, param);
                          }
                          }(callbacks)), subs$1);
              } else {
                return ;
              }
          case /* Registration */1 :
              var diCB = subs._2;
              var cb = diCB.contents;
              if (cb !== undefined) {
                diCB.contents = undefined;
                return _1(cb, undefined);
              } else {
                return ;
              }
          case /* Mapper */2 :
              var subCallbacks = _1(subs._0, callbacks);
              _subs = subs._1;
              _callbacks = subCallbacks;
              continue ;
          
        }
      }  };
    if (typeof oldSub === "number") {
      if (typeof newSub === "number") {
        return newSub;
      }
      
    } else {
      switch (oldSub.TAG | 0) {
        case /* Batch */0 :
            if (typeof newSub !== "number" && newSub.TAG === /* Batch */0) {
              var aux = function (_oldList, _newList) {
                while(true) {
                  var newList = _newList;
                  var oldList = _oldList;
                  if (oldList) {
                    var oldRest = oldList.tl;
                    var oldSubSub = oldList.hd;
                    if (newList) {
                      run(oldCallbacks, newCallbacks, oldSubSub, newList.hd);
                      _newList = newList.tl;
                      _oldList = oldRest;
                      continue ;
                    }
                    disable(oldCallbacks, oldSubSub);
                    _newList = /* [] */0;
                    _oldList = oldRest;
                    continue ;
                  }
                  if (!newList) {
                    return ;
                  }
                  enable(newCallbacks, newList.hd);
                  _newList = newList.tl;
                  _oldList = /* [] */0;
                  continue ;
                }            };
              aux(oldSub._0, newSub._0);
              return newSub;
            }
            break;
        case /* Registration */1 :
            if (typeof newSub !== "number" && newSub.TAG === /* Registration */1 && oldSub._0 === newSub._0) {
              newSub._2.contents = oldSub._2.contents;
              return newSub;
            }
            break;
        case /* Mapper */2 :
            if (typeof newSub !== "number" && newSub.TAG === /* Mapper */2) {
              var olderCallbacks = _1(oldSub._0, oldCallbacks);
              var newerCallbacks = _1(newSub._0, newCallbacks);
              run(olderCallbacks, newerCallbacks, oldSub._1, newSub._1);
              return newSub;
            }
            break;
        
      }
    }
    disable(oldCallbacks, oldSub);
    enable(newCallbacks, newSub);
    return newSub;
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function programStateWrapper(initModel, pump, shutdown) {
    var model = {
      contents: initModel
    };
    var callbacks = {
      contents: {
        enqueue: (function (_msg) {
            console.log("INVALID enqueue CALL!");
            
          }),
        on: (function (param) {
            
          })
      }
    };
    var pumperInterface = _1(pump, callbacks);
    var pending = {
      contents: undefined
    };
    var handler = function (msg) {
      var msgs = pending.contents;
      if (msgs !== undefined) {
        pending.contents = {
          hd: msg,
          tl: msgs
        };
        return ;
      }
      pending.contents = /* [] */0;
      var newModel = _2(pumperInterface.handleMsg, model.contents, msg);
      model.contents = newModel;
      var msgs$1 = pending.contents;
      if (msgs$1 !== undefined) {
        if (msgs$1) {
          pending.contents = undefined;
          return iter$1(handler, rev(msgs$1));
        } else {
          pending.contents = undefined;
          return ;
        }
      }
      throw {
            RE_EXN_ID: "Failure",
            _1: "INVALID message queue state, should never be None during message processing!",
            Error: new Error()
          };
    };
    var render_events = {
      contents: /* [] */0
    };
    var finalizedCBs_enqueue = handler;
    var finalizedCBs_on = function (msg) {
      if (typeof msg === "number") {
        return iter$1(handler, render_events.contents);
      }
      if (msg.TAG === /* AddRenderMsg */0) {
        render_events.contents = append(render_events.contents, {
              hd: msg._0,
              tl: /* [] */0
            });
        return ;
      }
      var msg$1 = msg._0;
      render_events.contents = filter$1(function (mg) {
              return msg$1 !== mg;
            })(render_events.contents);
      
    };
    var finalizedCBs = {
      enqueue: finalizedCBs_enqueue,
      on: finalizedCBs_on
    };
    callbacks.contents = finalizedCBs;
    var pi_requestShutdown = function (param) {
      callbacks.contents = {
        enqueue: (function (_msg) {
            console.log("INVALID message enqueued when shut down");
            
          }),
        on: (function (param) {
            
          })
      };
      var cmd = _1(shutdown, model.contents);
      _1(pumperInterface.shutdown, cmd);
      
    };
    var render_string = function (param) {
      return _1(pumperInterface.render_string, model.contents);
    };
    _1(pumperInterface.startup, undefined);
    return {
            pushMsg: handler,
            shutdown: pi_requestShutdown,
            getHtmlString: render_string
          };
  }

  function programLoop(update, view, subscriptions, initModel, initCmd, parentNode) {
    if (parentNode === undefined) {
      return function (callbacks) {
        var oldSub = {
          contents: /* NoSub */0
        };
        var handleSubscriptionChange = function (model) {
          var newSub = _1(subscriptions, model);
          oldSub.contents = run(callbacks, callbacks, oldSub.contents, newSub);
          
        };
        return {
                startup: (function (param) {
                    run$1(callbacks, initCmd);
                    handleSubscriptionChange(initModel);
                    
                  }),
                render_string: (function (model) {
                    return renderToHtmlString(_1(view, model));
                  }),
                handleMsg: (function (model, msg) {
                    var match = _2(update, model, msg);
                    var newModel = match[0];
                    run$1(callbacks, match[1]);
                    handleSubscriptionChange(newModel);
                    return newModel;
                  }),
                shutdown: (function (cmd) {
                    run$1(callbacks, cmd);
                    oldSub.contents = run(callbacks, callbacks, oldSub.contents, /* NoSub */0);
                    
                  })
              };
      };
    }
    var parentNode$1 = valFromOption(parentNode);
    return function (callbacks) {
      var priorRenderedVdom = {
        contents: /* [] */0
      };
      var latestModel = {
        contents: initModel
      };
      var nextFrameID = {
        contents: undefined
      };
      var doRender = function (_delta) {
        var _id = nextFrameID.contents;
        if (_id === undefined) {
          return ;
        }
        var newVdom_0 = _1(view, latestModel.contents);
        var newVdom = {
          hd: newVdom_0,
          tl: /* [] */0
        };
        var justRenderedVdom = patchVNodesIntoElement(callbacks, parentNode$1, priorRenderedVdom.contents, newVdom);
        priorRenderedVdom.contents = justRenderedVdom;
        _1(callbacks.contents.on, /* Render */0);
        nextFrameID.contents = undefined;
        
      };
      var scheduleRender = function (param) {
        var match = nextFrameID.contents;
        if (match !== undefined) {
          return ;
        }
        var id = window.requestAnimationFrame(doRender);
        nextFrameID.contents = id;
        
      };
      var clearPnode = function (param) {
        while(parentNode$1.childNodes.length > 0) {
          var firstChild = parentNode$1.firstChild;
          if (firstChild !== null) {
            parentNode$1.removeChild(firstChild);
          }
          
        }      
      };
      var oldSub = {
        contents: /* NoSub */0
      };
      var handleSubscriptionChange = function (model) {
        var newSub = _1(subscriptions, model);
        oldSub.contents = run(callbacks, callbacks, oldSub.contents, newSub);
        
      };
      var handlerStartup = function (param) {
        clearPnode();
        run$1(callbacks, initCmd);
        handleSubscriptionChange(latestModel.contents);
        nextFrameID.contents = -1;
        doRender();
        
      };
      var render_string = function (model) {
        return renderToHtmlString(_1(view, model));
      };
      var handler = function (model, msg) {
        var match = _2(update, model, msg);
        var newModel = match[0];
        latestModel.contents = newModel;
        run$1(callbacks, match[1]);
        scheduleRender();
        handleSubscriptionChange(newModel);
        return newModel;
      };
      var handlerShutdown = function (cmd) {
        nextFrameID.contents = undefined;
        run$1(callbacks, cmd);
        oldSub.contents = run(callbacks, callbacks, oldSub.contents, /* NoSub */0);
        priorRenderedVdom.contents = /* [] */0;
        clearPnode();
        
      };
      return {
              startup: handlerStartup,
              render_string: render_string,
              handleMsg: handler,
              shutdown: handlerShutdown
            };
    };
  }

  function program(param, pnode, flags) {
    polyfills();
    var match = _1(param.init, flags);
    var initModel = match[0];
    var opnode = (pnode == null) ? undefined : some(pnode);
    var pumpInterface = programLoop(param.update, param.view, param.subscriptions, initModel, match[1], opnode);
    return programStateWrapper(initModel, pumpInterface, param.shutdown);
  }

  function standardProgram(param, pnode, args) {
    return program({
                init: param.init,
                update: param.update,
                view: param.view,
                subscriptions: param.subscriptions,
                shutdown: (function (_model) {
                    return /* NoCmd */0;
                  })
              }, pnode, args);
  }
  /* No side effect */

  function map$2(f, a) {
    var l = a.length;
    if (l === 0) {
      return [];
    }
    var r = caml_make_vect(l, _1(f, a[0]));
    for(var i = 1; i < l; ++i){
      r[i] = _1(f, a[i]);
    }
    return r;
  }

  function to_list(a) {
    var _i = a.length - 1 | 0;
    var _res = /* [] */0;
    while(true) {
      var res = _res;
      var i = _i;
      if (i < 0) {
        return res;
      }
      _res = {
        hd: a[i],
        tl: res
      };
      _i = i - 1 | 0;
      continue ;
    }}

  function fold_right(f, a, x) {
    var r = x;
    for(var i = a.length - 1 | 0; i >= 0; --i){
      r = _2(f, a[i], r);
    }
    return r;
  }
  /* No side effect */

  function get(dict, k) {
    if ((k in dict)) {
      return some(dict[k]);
    }
    
  }
  /* No side effect */

  function classify$1(x) {
    var ty = typeof x;
    if (ty === "string") {
      return {
              TAG: /* JSONString */0,
              _0: x
            };
    } else if (ty === "number") {
      return {
              TAG: /* JSONNumber */1,
              _0: x
            };
    } else if (ty === "boolean") {
      if (x === true) {
        return /* JSONTrue */1;
      } else {
        return /* JSONFalse */0;
      }
    } else if (x === null) {
      return /* JSONNull */2;
    } else if (Array.isArray(x)) {
      return {
              TAG: /* JSONArray */3,
              _0: x
            };
    } else {
      return {
              TAG: /* JSONObject */2,
              _0: x
            };
    }
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  var classify = classify$1;
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function error(e) {
    if (e.TAG === /* Ok */0) {
      return ;
    } else {
      return some(e._0);
    }
  }

  function first(fst, e) {
    if (e.TAG === /* Ok */0) {
      return fst;
    } else {
      return e;
    }
  }

  function error_of_first(fst, e) {
    if (e.TAG === /* Ok */0) {
      return error(fst);
    } else {
      return some(e._0);
    }
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function height(param) {
    if (param) {
      return param.h;
    } else {
      return 0;
    }
  }

  function create(l, x, d, r) {
    var hl = height(l);
    var hr = height(r);
    return /* Node */{
            l: l,
            v: x,
            d: d,
            r: r,
            h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          };
  }

  function singleton(x, d) {
    return /* Node */{
            l: /* Empty */0,
            v: x,
            d: d,
            r: /* Empty */0,
            h: 1
          };
  }

  function bal(l, x, d, r) {
    var hl = l ? l.h : 0;
    var hr = r ? r.h : 0;
    if (hl > (hr + 2 | 0)) {
      if (l) {
        var lr = l.r;
        var ld = l.d;
        var lv = l.v;
        var ll = l.l;
        if (height(ll) >= height(lr)) {
          return create(ll, lv, ld, create(lr, x, d, r));
        }
        if (lr) {
          return create(create(ll, lv, ld, lr.l), lr.v, lr.d, create(lr.r, x, d, r));
        }
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "Map.bal",
              Error: new Error()
            };
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Map.bal",
            Error: new Error()
          };
    }
    if (hr <= (hl + 2 | 0)) {
      return /* Node */{
              l: l,
              v: x,
              d: d,
              r: r,
              h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            };
    }
    if (r) {
      var rr = r.r;
      var rd = r.d;
      var rv = r.v;
      var rl = r.l;
      if (height(rr) >= height(rl)) {
        return create(create(l, x, d, rl), rv, rd, rr);
      }
      if (rl) {
        return create(create(l, x, d, rl.l), rl.v, rl.d, create(rl.r, rv, rd, rr));
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Map.bal",
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Map.bal",
          Error: new Error()
        };
  }

  function is_empty(param) {
    if (param) {
      return false;
    } else {
      return true;
    }
  }

  function add(x, data, m) {
    if (!m) {
      return /* Node */{
              l: /* Empty */0,
              v: x,
              d: data,
              r: /* Empty */0,
              h: 1
            };
    }
    var r = m.r;
    var d = m.d;
    var v = m.v;
    var l = m.l;
    var c = caml_string_compare(x, v);
    if (c === 0) {
      if (d === data) {
        return m;
      } else {
        return /* Node */{
                l: l,
                v: x,
                d: data,
                r: r,
                h: m.h
              };
      }
    }
    if (c < 0) {
      var ll = add(x, data, l);
      if (l === ll) {
        return m;
      } else {
        return bal(ll, v, d, r);
      }
    }
    var rr = add(x, data, r);
    if (r === rr) {
      return m;
    } else {
      return bal(l, v, d, rr);
    }
  }

  function find(x, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var c = caml_string_compare(x, param.v);
        if (c === 0) {
          return param.d;
        }
        _param = c < 0 ? param.l : param.r;
        continue ;
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }}

  function find_first(f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var v = param.v;
        if (_1(f, v)) {
          var _v0 = v;
          var _d0 = param.d;
          var _param$1 = param.l;
          while(true) {
            var param$1 = _param$1;
            var d0 = _d0;
            var v0 = _v0;
            if (!param$1) {
              return [
                      v0,
                      d0
                    ];
            }
            var v$1 = param$1.v;
            if (_1(f, v$1)) {
              _param$1 = param$1.l;
              _d0 = param$1.d;
              _v0 = v$1;
              continue ;
            }
            _param$1 = param$1.r;
            continue ;
          }      }
        _param = param.r;
        continue ;
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }}

  function find_first_opt(f, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var v = param.v;
      if (_1(f, v)) {
        var _v0 = v;
        var _d0 = param.d;
        var _param$1 = param.l;
        while(true) {
          var param$1 = _param$1;
          var d0 = _d0;
          var v0 = _v0;
          if (!param$1) {
            return [
                    v0,
                    d0
                  ];
          }
          var v$1 = param$1.v;
          if (_1(f, v$1)) {
            _param$1 = param$1.l;
            _d0 = param$1.d;
            _v0 = v$1;
            continue ;
          }
          _param$1 = param$1.r;
          continue ;
        }    }
      _param = param.r;
      continue ;
    }}

  function find_last(f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var v = param.v;
        if (_1(f, v)) {
          var _v0 = v;
          var _d0 = param.d;
          var _param$1 = param.r;
          while(true) {
            var param$1 = _param$1;
            var d0 = _d0;
            var v0 = _v0;
            if (!param$1) {
              return [
                      v0,
                      d0
                    ];
            }
            var v$1 = param$1.v;
            if (_1(f, v$1)) {
              _param$1 = param$1.r;
              _d0 = param$1.d;
              _v0 = v$1;
              continue ;
            }
            _param$1 = param$1.l;
            continue ;
          }      }
        _param = param.l;
        continue ;
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }}

  function find_last_opt(f, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var v = param.v;
      if (_1(f, v)) {
        var _v0 = v;
        var _d0 = param.d;
        var _param$1 = param.r;
        while(true) {
          var param$1 = _param$1;
          var d0 = _d0;
          var v0 = _v0;
          if (!param$1) {
            return [
                    v0,
                    d0
                  ];
          }
          var v$1 = param$1.v;
          if (_1(f, v$1)) {
            _param$1 = param$1.r;
            _d0 = param$1.d;
            _v0 = v$1;
            continue ;
          }
          _param$1 = param$1.l;
          continue ;
        }    }
      _param = param.l;
      continue ;
    }}

  function find_opt(x, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var c = caml_string_compare(x, param.v);
      if (c === 0) {
        return some(param.d);
      }
      _param = c < 0 ? param.l : param.r;
      continue ;
    }}

  function mem(x, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return false;
      }
      var c = caml_string_compare(x, param.v);
      if (c === 0) {
        return true;
      }
      _param = c < 0 ? param.l : param.r;
      continue ;
    }}

  function min_binding(_param) {
    while(true) {
      var param = _param;
      if (param) {
        var l = param.l;
        if (!l) {
          return [
                  param.v,
                  param.d
                ];
        }
        _param = l;
        continue ;
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }}

  function min_binding_opt(_param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var l = param.l;
      if (!l) {
        return [
                param.v,
                param.d
              ];
      }
      _param = l;
      continue ;
    }}

  function max_binding(_param) {
    while(true) {
      var param = _param;
      if (param) {
        var r = param.r;
        if (!r) {
          return [
                  param.v,
                  param.d
                ];
        }
        _param = r;
        continue ;
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }}

  function max_binding_opt(_param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      var r = param.r;
      if (!r) {
        return [
                param.v,
                param.d
              ];
      }
      _param = r;
      continue ;
    }}

  function remove_min_binding(param) {
    if (param) {
      var l = param.l;
      if (l) {
        return bal(remove_min_binding(l), param.v, param.d, param.r);
      } else {
        return param.r;
      }
    }
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Map.remove_min_elt",
          Error: new Error()
        };
  }

  function merge(t1, t2) {
    if (!t1) {
      return t2;
    }
    if (!t2) {
      return t1;
    }
    var match = min_binding(t2);
    return bal(t1, match[0], match[1], remove_min_binding(t2));
  }

  function remove(x, m) {
    if (!m) {
      return /* Empty */0;
    }
    var r = m.r;
    var d = m.d;
    var v = m.v;
    var l = m.l;
    var c = caml_string_compare(x, v);
    if (c === 0) {
      return merge(l, r);
    }
    if (c < 0) {
      var ll = remove(x, l);
      if (l === ll) {
        return m;
      } else {
        return bal(ll, v, d, r);
      }
    }
    var rr = remove(x, r);
    if (r === rr) {
      return m;
    } else {
      return bal(l, v, d, rr);
    }
  }

  function update$1(x, f, m) {
    if (m) {
      var r = m.r;
      var d = m.d;
      var v = m.v;
      var l = m.l;
      var c = caml_string_compare(x, v);
      if (c === 0) {
        var data = _1(f, some(d));
        if (data === undefined) {
          return merge(l, r);
        }
        var data$1 = valFromOption(data);
        if (d === data$1) {
          return m;
        } else {
          return /* Node */{
                  l: l,
                  v: x,
                  d: data$1,
                  r: r,
                  h: m.h
                };
        }
      }
      if (c < 0) {
        var ll = update$1(x, f, l);
        if (l === ll) {
          return m;
        } else {
          return bal(ll, v, d, r);
        }
      }
      var rr = update$1(x, f, r);
      if (r === rr) {
        return m;
      } else {
        return bal(l, v, d, rr);
      }
    }
    var data$2 = _1(f, undefined);
    if (data$2 !== undefined) {
      return /* Node */{
              l: /* Empty */0,
              v: x,
              d: valFromOption(data$2),
              r: /* Empty */0,
              h: 1
            };
    } else {
      return /* Empty */0;
    }
  }

  function iter(f, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return ;
      }
      iter(f, param.l);
      _2(f, param.v, param.d);
      _param = param.r;
      continue ;
    }}

  function map(f, param) {
    if (!param) {
      return /* Empty */0;
    }
    var l$prime = map(f, param.l);
    var d$prime = _1(f, param.d);
    var r$prime = map(f, param.r);
    return /* Node */{
            l: l$prime,
            v: param.v,
            d: d$prime,
            r: r$prime,
            h: param.h
          };
  }

  function mapi(f, param) {
    if (!param) {
      return /* Empty */0;
    }
    var v = param.v;
    var l$prime = mapi(f, param.l);
    var d$prime = _2(f, v, param.d);
    var r$prime = mapi(f, param.r);
    return /* Node */{
            l: l$prime,
            v: v,
            d: d$prime,
            r: r$prime,
            h: param.h
          };
  }

  function fold(f, _m, _accu) {
    while(true) {
      var accu = _accu;
      var m = _m;
      if (!m) {
        return accu;
      }
      _accu = _3(f, m.v, m.d, fold(f, m.l, accu));
      _m = m.r;
      continue ;
    }}

  function for_all(p, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return true;
      }
      if (!_2(p, param.v, param.d)) {
        return false;
      }
      if (!for_all(p, param.l)) {
        return false;
      }
      _param = param.r;
      continue ;
    }}

  function exists(p, _param) {
    while(true) {
      var param = _param;
      if (!param) {
        return false;
      }
      if (_2(p, param.v, param.d)) {
        return true;
      }
      if (exists(p, param.l)) {
        return true;
      }
      _param = param.r;
      continue ;
    }}

  function add_min_binding(k, x, param) {
    if (param) {
      return bal(add_min_binding(k, x, param.l), param.v, param.d, param.r);
    } else {
      return singleton(k, x);
    }
  }

  function add_max_binding(k, x, param) {
    if (param) {
      return bal(param.l, param.v, param.d, add_max_binding(k, x, param.r));
    } else {
      return singleton(k, x);
    }
  }

  function join(l, v, d, r) {
    if (!l) {
      return add_min_binding(v, d, r);
    }
    if (!r) {
      return add_max_binding(v, d, l);
    }
    var rh = r.h;
    var lh = l.h;
    if (lh > (rh + 2 | 0)) {
      return bal(l.l, l.v, l.d, join(l.r, v, d, r));
    } else if (rh > (lh + 2 | 0)) {
      return bal(join(l, v, d, r.l), r.v, r.d, r.r);
    } else {
      return create(l, v, d, r);
    }
  }

  function concat(t1, t2) {
    if (!t1) {
      return t2;
    }
    if (!t2) {
      return t1;
    }
    var match = min_binding(t2);
    return join(t1, match[0], match[1], remove_min_binding(t2));
  }

  function concat_or_join(t1, v, d, t2) {
    if (d !== undefined) {
      return join(t1, v, valFromOption(d), t2);
    } else {
      return concat(t1, t2);
    }
  }

  function split(x, param) {
    if (!param) {
      return [
              /* Empty */0,
              undefined,
              /* Empty */0
            ];
    }
    var r = param.r;
    var d = param.d;
    var v = param.v;
    var l = param.l;
    var c = caml_string_compare(x, v);
    if (c === 0) {
      return [
              l,
              some(d),
              r
            ];
    }
    if (c < 0) {
      var match = split(x, l);
      return [
              match[0],
              match[1],
              join(match[2], v, d, r)
            ];
    }
    var match$1 = split(x, r);
    return [
            join(l, v, d, match$1[0]),
            match$1[1],
            match$1[2]
          ];
  }

  function merge$1(f, s1, s2) {
    if (s1) {
      var v1 = s1.v;
      if (s1.h >= height(s2)) {
        var match = split(v1, s2);
        return concat_or_join(merge$1(f, s1.l, match[0]), v1, _3(f, v1, some(s1.d), match[1]), merge$1(f, s1.r, match[2]));
      }
      
    } else if (!s2) {
      return /* Empty */0;
    }
    if (s2) {
      var v2 = s2.v;
      var match$1 = split(v2, s1);
      return concat_or_join(merge$1(f, match$1[0], s2.l), v2, _3(f, v2, match$1[1], some(s2.d)), merge$1(f, match$1[2], s2.r));
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "map.ml",
            393,
            10
          ],
          Error: new Error()
        };
  }

  function union(f, s1, s2) {
    if (!s1) {
      return s2;
    }
    if (!s2) {
      return s1;
    }
    var d2 = s2.d;
    var v2 = s2.v;
    var d1 = s1.d;
    var v1 = s1.v;
    if (s1.h >= s2.h) {
      var match = split(v1, s2);
      var d2$1 = match[1];
      var l = union(f, s1.l, match[0]);
      var r = union(f, s1.r, match[2]);
      if (d2$1 !== undefined) {
        return concat_or_join(l, v1, _3(f, v1, d1, valFromOption(d2$1)), r);
      } else {
        return join(l, v1, d1, r);
      }
    }
    var match$1 = split(v2, s1);
    var d1$1 = match$1[1];
    var l$1 = union(f, match$1[0], s2.l);
    var r$1 = union(f, match$1[2], s2.r);
    if (d1$1 !== undefined) {
      return concat_or_join(l$1, v2, _3(f, v2, valFromOption(d1$1), d2), r$1);
    } else {
      return join(l$1, v2, d2, r$1);
    }
  }

  function filter(p, m) {
    if (!m) {
      return /* Empty */0;
    }
    var r = m.r;
    var d = m.d;
    var v = m.v;
    var l = m.l;
    var l$prime = filter(p, l);
    var pvd = _2(p, v, d);
    var r$prime = filter(p, r);
    if (pvd) {
      if (l === l$prime && r === r$prime) {
        return m;
      } else {
        return join(l$prime, v, d, r$prime);
      }
    } else {
      return concat(l$prime, r$prime);
    }
  }

  function partition(p, param) {
    if (!param) {
      return [
              /* Empty */0,
              /* Empty */0
            ];
    }
    var d = param.d;
    var v = param.v;
    var match = partition(p, param.l);
    var lf = match[1];
    var lt = match[0];
    var pvd = _2(p, v, d);
    var match$1 = partition(p, param.r);
    var rf = match$1[1];
    var rt = match$1[0];
    if (pvd) {
      return [
              join(lt, v, d, rt),
              concat(lf, rf)
            ];
    } else {
      return [
              concat(lt, rt),
              join(lf, v, d, rf)
            ];
    }
  }

  function cons_enum(_m, _e) {
    while(true) {
      var e = _e;
      var m = _m;
      if (!m) {
        return e;
      }
      _e = /* More */{
        _0: m.v,
        _1: m.d,
        _2: m.r,
        _3: e
      };
      _m = m.l;
      continue ;
    }}

  function compare$4(cmp, m1, m2) {
    var _e1 = cons_enum(m1, /* End */0);
    var _e2 = cons_enum(m2, /* End */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        if (e2) {
          return -1;
        } else {
          return 0;
        }
      }
      if (!e2) {
        return 1;
      }
      var c = caml_string_compare(e1._0, e2._0);
      if (c !== 0) {
        return c;
      }
      var c$1 = _2(cmp, e1._1, e2._1);
      if (c$1 !== 0) {
        return c$1;
      }
      _e2 = cons_enum(e2._2, e2._3);
      _e1 = cons_enum(e1._2, e1._3);
      continue ;
    }}

  function equal(cmp, m1, m2) {
    var _e1 = cons_enum(m1, /* End */0);
    var _e2 = cons_enum(m2, /* End */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (!e1) {
        if (e2) {
          return false;
        } else {
          return true;
        }
      }
      if (!e2) {
        return false;
      }
      if (caml_string_compare(e1._0, e2._0) !== 0) {
        return false;
      }
      if (!_2(cmp, e1._1, e2._1)) {
        return false;
      }
      _e2 = cons_enum(e2._2, e2._3);
      _e1 = cons_enum(e1._2, e1._3);
      continue ;
    }}

  function cardinal(param) {
    if (param) {
      return (cardinal(param.l) + 1 | 0) + cardinal(param.r) | 0;
    } else {
      return 0;
    }
  }

  function bindings_aux(_accu, _param) {
    while(true) {
      var param = _param;
      var accu = _accu;
      if (!param) {
        return accu;
      }
      _param = param.l;
      _accu = {
        hd: [
          param.v,
          param.d
        ],
        tl: bindings_aux(accu, param.r)
      };
      continue ;
    }}

  function bindings(s) {
    return bindings_aux(/* [] */0, s);
  }

  var ObjectDict = {
    empty: /* Empty */0,
    is_empty: is_empty,
    mem: mem,
    add: add,
    update: update$1,
    singleton: singleton,
    remove: remove,
    merge: merge$1,
    union: union,
    compare: compare$4,
    equal: equal,
    iter: iter,
    fold: fold,
    for_all: for_all,
    exists: exists,
    filter: filter,
    partition: partition,
    cardinal: cardinal,
    bindings: bindings,
    min_binding: min_binding,
    min_binding_opt: min_binding_opt,
    max_binding: max_binding,
    max_binding_opt: max_binding_opt,
    choose: min_binding,
    choose_opt: min_binding_opt,
    split: split,
    find: find,
    find_opt: find_opt,
    find_first: find_first,
    find_first_opt: find_first_opt,
    find_last: find_last,
    find_last_opt: find_last_opt,
    map: map,
    mapi: mapi
  };

  var ParseFail = /* @__PURE__ */create$1("Tea_json.Decoder.ParseFail");

  var string = /* Decoder */{
    _0: (function (value) {
        var s = classify(value);
        if (typeof s === "number" || s.TAG !== /* JSONString */0) {
          return {
                  TAG: /* Error */1,
                  _0: "Non-string value"
                };
        } else {
          return {
                  TAG: /* Ok */0,
                  _0: s._0
                };
        }
      })
  };

  var $$int = /* Decoder */{
    _0: (function (value) {
        var n = classify(value);
        if (typeof n === "number") {
          return {
                  TAG: /* Error */1,
                  _0: "Non-int value"
                };
        }
        if (n.TAG !== /* JSONNumber */1) {
          return {
                  TAG: /* Error */1,
                  _0: "Non-int value"
                };
        }
        var n$1 = n._0;
        if (n$1 > min_int && n$1 < max_int) {
          return {
                  TAG: /* Ok */0,
                  _0: n$1 | 0
                };
        } else {
          return {
                  TAG: /* Error */1,
                  _0: "number out of int range"
                };
        }
      })
  };

  var $$float = /* Decoder */{
    _0: (function (value) {
        var n = classify(value);
        if (typeof n === "number" || n.TAG !== /* JSONNumber */1) {
          return {
                  TAG: /* Error */1,
                  _0: "Non-float-value"
                };
        } else {
          return {
                  TAG: /* Ok */0,
                  _0: n._0
                };
        }
      })
  };

  var bool = /* Decoder */{
    _0: (function (value) {
        var match = classify(value);
        if (typeof match !== "number") {
          return {
                  TAG: /* Error */1,
                  _0: "Non-boolean value"
                };
        }
        switch (match) {
          case /* JSONFalse */0 :
              return {
                      TAG: /* Ok */0,
                      _0: false
                    };
          case /* JSONTrue */1 :
              return {
                      TAG: /* Ok */0,
                      _0: true
                    };
          case /* JSONNull */2 :
              return {
                      TAG: /* Error */1,
                      _0: "Non-boolean value"
                    };
          
        }
      })
  };

  function $$null(v) {
    return /* Decoder */{
            _0: (function (value) {
                var match = classify(value);
                if (typeof match === "number" && match >= 2) {
                  return {
                          TAG: /* Ok */0,
                          _0: v
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-null value"
                        };
                }
              })
          };
  }

  function list(decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var a = classify(value);
                if (typeof a === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-list value"
                        };
                }
                if (a.TAG !== /* JSONArray */3) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-list value"
                        };
                }
                var parse = function (v) {
                  var r = _1(decoder$1, v);
                  if (r.TAG === /* Ok */0) {
                    return r._0;
                  }
                  throw {
                        RE_EXN_ID: ParseFail,
                        _1: r._0,
                        Error: new Error()
                      };
                };
                try {
                  return {
                          TAG: /* Ok */0,
                          _0: map$3(parse, to_list(a._0))
                        };
                }
                catch (raw_e){
                  var e = internalToOCamlException(raw_e);
                  if (e.RE_EXN_ID === ParseFail) {
                    return {
                            TAG: /* Error */1,
                            _0: "list -> " + e._1
                          };
                  }
                  throw e;
                }
              })
          };
  }

  function array(decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var a = classify(value);
                if (typeof a === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-array value"
                        };
                }
                if (a.TAG !== /* JSONArray */3) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-array value"
                        };
                }
                var parse = function (v) {
                  var r = _1(decoder$1, v);
                  if (r.TAG === /* Ok */0) {
                    return r._0;
                  }
                  throw {
                        RE_EXN_ID: ParseFail,
                        _1: r._0,
                        Error: new Error()
                      };
                };
                try {
                  return {
                          TAG: /* Ok */0,
                          _0: map$2(parse, a._0)
                        };
                }
                catch (raw_e){
                  var e = internalToOCamlException(raw_e);
                  if (e.RE_EXN_ID === ParseFail) {
                    return {
                            TAG: /* Error */1,
                            _0: "array -> " + e._1
                          };
                  }
                  throw e;
                }
              })
          };
  }

  function keyValuePairs(decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var o = classify(value);
                if (typeof o === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-keyValuePair value"
                        };
                }
                if (o.TAG !== /* JSONObject */2) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-keyValuePair value"
                        };
                }
                var o$1 = o._0;
                var keys = Object.keys(o$1);
                var parse = function (k, l) {
                  var v = get(o$1, k);
                  if (v !== undefined) {
                    var r = _1(decoder$1, valFromOption(v));
                    if (r.TAG === /* Ok */0) {
                      return {
                              hd: [
                                k,
                                r._0
                              ],
                              tl: l
                            };
                    }
                    throw {
                          RE_EXN_ID: ParseFail,
                          _1: r._0,
                          Error: new Error()
                        };
                  }
                  throw {
                        RE_EXN_ID: ParseFail,
                        _1: "Key is undefined: " + k,
                        Error: new Error()
                      };
                };
                try {
                  return {
                          TAG: /* Ok */0,
                          _0: fold_right(parse, keys, /* [] */0)
                        };
                }
                catch (raw_e){
                  var e = internalToOCamlException(raw_e);
                  if (e.RE_EXN_ID === ParseFail) {
                    return {
                            TAG: /* Error */1,
                            _0: "Invalid keyValuePair parsing: " + e._1
                          };
                  }
                  throw e;
                }
              })
          };
  }

  function dict(decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var o = classify(value);
                if (typeof o === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-dict value"
                        };
                }
                if (o.TAG !== /* JSONObject */2) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-dict value"
                        };
                }
                var o$1 = o._0;
                var keys = Object.keys(o$1);
                var parse = function (k, d) {
                  var v = get(o$1, k);
                  if (v !== undefined) {
                    var r = _1(decoder$1, valFromOption(v));
                    if (r.TAG === /* Ok */0) {
                      return add(k, r._0, d);
                    }
                    throw {
                          RE_EXN_ID: ParseFail,
                          _1: r._0,
                          Error: new Error()
                        };
                  }
                  throw {
                        RE_EXN_ID: ParseFail,
                        _1: "Key is undefined: " + k,
                        Error: new Error()
                      };
                };
                try {
                  return {
                          TAG: /* Ok */0,
                          _0: fold_right(parse, keys, /* Empty */0)
                        };
                }
                catch (raw_e){
                  var e = internalToOCamlException(raw_e);
                  if (e.RE_EXN_ID === ParseFail) {
                    return {
                            TAG: /* Error */1,
                            _0: "Invalid dict parsing: " + e._1
                          };
                  }
                  throw e;
                }
              })
          };
  }

  function field(key, decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var o = classify(value);
                if (typeof o === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-fieldable value"
                        };
                }
                if (o.TAG !== /* JSONObject */2) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-fieldable value"
                        };
                }
                var v = get(o._0, key);
                if (v === undefined) {
                  return {
                          TAG: /* Error */1,
                          _0: "Field Value is undefined: " + key
                        };
                }
                var o$1 = _1(decoder$1, valFromOption(v));
                if (o$1.TAG === /* Ok */0) {
                  return o$1;
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: "field `" + (key + ("` -> " + o$1._0))
                        };
                }
              })
          };
  }

  function at(fields, dec) {
    return fold_right$1(field, fields, dec);
  }

  function index(idx, decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var a = classify(value);
                if (typeof a === "number") {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-array value"
                        };
                }
                if (a.TAG !== /* JSONArray */3) {
                  return {
                          TAG: /* Error */1,
                          _0: "Non-array value"
                        };
                }
                var a$1 = a._0;
                if (idx < 0 || idx > a$1.length) {
                  return {
                          TAG: /* Error */1,
                          _0: "Array index out of range: " + String(idx)
                        };
                } else {
                  return _1(decoder$1, get$2(a$1, idx));
                }
              })
          };
  }

  function maybe(decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var r = _1(decoder$1, value);
                if (r.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: some(r._0)
                        };
                } else {
                  return {
                          TAG: /* Ok */0,
                          _0: undefined
                        };
                }
              })
          };
  }

  function oneOf(decoders) {
    return /* Decoder */{
            _0: (function (value) {
                var parse = function (v, _param) {
                  while(true) {
                    var param = _param;
                    if (!param) {
                      return {
                              TAG: /* Error */1,
                              _0: "No one-of's matched"
                            };
                    }
                    var rest = param.tl;
                    try {
                      var ok = _1(param.hd._0, v);
                      if (ok.TAG === /* Ok */0) {
                        return ok;
                      } else {
                        return parse(v, rest);
                      }
                    }
                    catch (exn){
                      _param = rest;
                      continue ;
                    }
                  }              };
                return parse(value, decoders);
              })
          };
  }

  function map$1(mapper, decoder1) {
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var v1 = _1(decoder1$1, value);
                if (v1.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _1(mapper, v1._0)
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: "map " + v1._0
                        };
                }
              })
          };
  }

  function map2(mapper, decoder1, decoder2) {
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _2(mapper, match._0, match$1._0)
                        };
                }
                var e = error_of_first(match, match$1);
                if (e !== undefined) {
                  return {
                          TAG: /* Error */1,
                          _0: "map2 -> " + e
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map3(mapper, decoder1, decoder2, decoder3) {
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _3(mapper, match._0, match$1._0, match$2._0)
                        };
                }
                var e = first(match$2, first(match$1, match));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map3 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map4(mapper, decoder1, decoder2, decoder3, decoder4) {
    var decoder4$1 = decoder4._0;
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                var match$3 = _1(decoder4$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0 && match$3.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _4(mapper, match._0, match$1._0, match$2._0, match$3._0)
                        };
                }
                var e = first(match$3, first(match$2, first(match$1, match)));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map4 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map5(mapper, decoder1, decoder2, decoder3, decoder4, decoder5) {
    var decoder5$1 = decoder5._0;
    var decoder4$1 = decoder4._0;
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                var match$3 = _1(decoder4$1, value);
                var match$4 = _1(decoder5$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0 && match$3.TAG === /* Ok */0 && match$4.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _5(mapper, match._0, match$1._0, match$2._0, match$3._0, match$4._0)
                        };
                }
                var e = first(match$4, first(match$3, first(match$2, first(match$1, match))));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map5 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map6(mapper, decoder1, decoder2, decoder3, decoder4, decoder5, decoder6) {
    var decoder6$1 = decoder6._0;
    var decoder5$1 = decoder5._0;
    var decoder4$1 = decoder4._0;
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                var match$3 = _1(decoder4$1, value);
                var match$4 = _1(decoder5$1, value);
                var match$5 = _1(decoder6$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0 && match$3.TAG === /* Ok */0 && match$4.TAG === /* Ok */0 && match$5.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _6(mapper, match._0, match$1._0, match$2._0, match$3._0, match$4._0, match$5._0)
                        };
                }
                var e = first(match$5, first(match$4, first(match$3, first(match$2, first(match$1, match)))));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map6 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map7(mapper, decoder1, decoder2, decoder3, decoder4, decoder5, decoder6, decoder7) {
    var decoder7$1 = decoder7._0;
    var decoder6$1 = decoder6._0;
    var decoder5$1 = decoder5._0;
    var decoder4$1 = decoder4._0;
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                var match$3 = _1(decoder4$1, value);
                var match$4 = _1(decoder5$1, value);
                var match$5 = _1(decoder6$1, value);
                var match$6 = _1(decoder7$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0 && match$3.TAG === /* Ok */0 && match$4.TAG === /* Ok */0 && match$5.TAG === /* Ok */0 && match$6.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _7(mapper, match._0, match$1._0, match$2._0, match$3._0, match$4._0, match$5._0, match$6._0)
                        };
                }
                var e = first(match$6, first(match$5, first(match$4, first(match$3, first(match$2, first(match$1, match))))));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map7 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function map8(mapper, decoder1, decoder2, decoder3, decoder4, decoder5, decoder6, decoder7, decoder8) {
    var decoder8$1 = decoder8._0;
    var decoder7$1 = decoder7._0;
    var decoder6$1 = decoder6._0;
    var decoder5$1 = decoder5._0;
    var decoder4$1 = decoder4._0;
    var decoder3$1 = decoder3._0;
    var decoder2$1 = decoder2._0;
    var decoder1$1 = decoder1._0;
    return /* Decoder */{
            _0: (function (value) {
                var match = _1(decoder1$1, value);
                var match$1 = _1(decoder2$1, value);
                var match$2 = _1(decoder3$1, value);
                var match$3 = _1(decoder4$1, value);
                var match$4 = _1(decoder5$1, value);
                var match$5 = _1(decoder6$1, value);
                var match$6 = _1(decoder7$1, value);
                var match$7 = _1(decoder8$1, value);
                if (match.TAG === /* Ok */0 && match$1.TAG === /* Ok */0 && match$2.TAG === /* Ok */0 && match$3.TAG === /* Ok */0 && match$4.TAG === /* Ok */0 && match$5.TAG === /* Ok */0 && match$6.TAG === /* Ok */0 && match$7.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: _8(mapper, match._0, match$1._0, match$2._0, match$3._0, match$4._0, match$5._0, match$6._0, match$7._0)
                        };
                }
                var e = first(match$7, first(match$6, first(match$5, first(match$4, first(match$3, first(match$2, first(match$1, match)))))));
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: "map8 -> " + e._0
                        };
                }
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "Impossible case",
                      Error: new Error()
                    };
              })
          };
  }

  function succeed(v) {
    return /* Decoder */{
            _0: (function (_value) {
                return {
                        TAG: /* Ok */0,
                        _0: v
                      };
              })
          };
  }

  function fail(e) {
    return /* Decoder */{
            _0: (function (_value) {
                return {
                        TAG: /* Error */1,
                        _0: e
                      };
              })
          };
  }

  var value = /* Decoder */{
    _0: (function (value) {
        return {
                TAG: /* Ok */0,
                _0: value
              };
      })
  };

  function andThen(func, decoder) {
    var decoder$1 = decoder._0;
    return /* Decoder */{
            _0: (function (value) {
                var r = _1(decoder$1, value);
                if (r.TAG !== /* Ok */0) {
                  return r;
                }
                var andThenDecoder = _1(func, r._0);
                return _1(andThenDecoder._0, value);
              })
          };
  }

  function lazy_(func) {
    return andThen(func, /* Decoder */{
                _0: (function (_value) {
                    return {
                            TAG: /* Ok */0,
                            _0: undefined
                          };
                  })
              });
  }

  function nullable(decoder) {
    return oneOf({
                hd: $$null(undefined),
                tl: {
                  hd: map$1((function (v) {
                          return some(v);
                        }), decoder),
                  tl: /* [] */0
                }
              });
  }

  function decodeValue(decoder, value) {
    try {
      return _1(decoder._0, value);
    }
    catch (raw_e){
      var e = internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === ParseFail) {
        return {
                TAG: /* Error */1,
                _0: e._1
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "Unknown JSON parsing error"
              };
      }
    }
  }

  function decodeEvent(decoder, value) {
    try {
      return _1(decoder._0, value);
    }
    catch (raw_e){
      var e = internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === ParseFail) {
        return {
                TAG: /* Error */1,
                _0: e._1
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "Unknown JSON parsing error"
              };
      }
    }
  }

  function decodeString(decoder, string) {
    try {
      var value = JSON.parse(string);
      return decodeValue(decoder, value);
    }
    catch (exn){
      return {
              TAG: /* Error */1,
              _0: "Invalid JSON string"
            };
    }
  }

  var Decoder = {
    ObjectDict: ObjectDict,
    ParseFail: ParseFail,
    string: string,
    $$int: $$int,
    $$float: $$float,
    bool: bool,
    $$null: $$null,
    list: list,
    array: array,
    keyValuePairs: keyValuePairs,
    dict: dict,
    field: field,
    at: at,
    index: index,
    maybe: maybe,
    oneOf: oneOf,
    map: map$1,
    map2: map2,
    map3: map3,
    map4: map4,
    map5: map5,
    map6: map6,
    map7: map7,
    map8: map8,
    succeed: succeed,
    fail: fail,
    value: value,
    andThen: andThen,
    lazy_: lazy_,
    nullable: nullable,
    decodeValue: decodeValue,
    decodeEvent: decodeEvent,
    decodeString: decodeString
  };
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function text(str) {
    return {
            TAG: /* Text */1,
            _0: str
          };
  }

  function div(keyOpt, uniqueOpt, props, nodes) {
    var key = keyOpt !== undefined ? keyOpt : "";
    var unique = uniqueOpt !== undefined ? uniqueOpt : "";
    return fullnode("", "div", key, unique, props, nodes);
  }

  function button(keyOpt, uniqueOpt, props, nodes) {
    var key = keyOpt !== undefined ? keyOpt : "";
    var unique = uniqueOpt !== undefined ? uniqueOpt : "";
    return fullnode("", "button", key, unique, props, nodes);
  }

  function class$prime(name) {
    return {
            TAG: /* RawProp */0,
            _0: "className",
            _1: name
          };
  }

  function onClick(msg) {
    return onMsg("click", msg);
  }

  Decoder.at({
        hd: "target",
        tl: {
          hd: "value",
          tl: /* [] */0
        }
      }, Decoder.string);

  Decoder.at({
        hd: "target",
        tl: {
          hd: "checked",
          tl: /* [] */0
        }
      }, Decoder.bool);

  Decoder.field("keyCode", Decoder.$$int);

  function max(value) {
    return {
            TAG: /* Attribute */1,
            _0: "",
            _1: "max",
            _2: value
          };
  }

  function min(value) {
    return {
            TAG: /* Attribute */1,
            _0: "",
            _1: "min",
            _2: value
          };
  }

  function step(value) {
    return {
            TAG: /* Attribute */1,
            _0: "",
            _1: "step",
            _2: value
          };
  }

  function disabled(b) {
    if (b) {
      return {
              TAG: /* Attribute */1,
              _0: "",
              _1: "disabled",
              _2: "true"
            };
    } else {
      return /* NoProp */0;
    }
  }

  function selected(b) {
    if (b) {
      return {
              TAG: /* Attribute */1,
              _0: "",
              _1: "selected",
              _2: "true"
            };
    } else {
      return /* NoProp */0;
    }
  }

  function acceptCharset(c) {
    return {
            TAG: /* Attribute */1,
            _0: "",
            _1: "accept-charset",
            _2: c
          };
  }

  function rel(value) {
    return {
            TAG: /* Attribute */1,
            _0: "",
            _1: "rel",
            _2: value
          };
  }

  var Attributes = {
    max: max,
    min: min,
    step: step,
    disabled: disabled,
    selected: selected,
    acceptCharset: acceptCharset,
    rel: rel
  };

  var noNode = noNode$1;
  /* targetValue Not a pure module */

  function Make$1(funarg) {
    var height = function (param) {
      if (param) {
        return param.h;
      } else {
        return 0;
      }
    };
    var create = function (l, x, d, r) {
      var hl = height(l);
      var hr = height(r);
      return /* Node */{
              l: l,
              v: x,
              d: d,
              r: r,
              h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            };
    };
    var singleton = function (x, d) {
      return /* Node */{
              l: /* Empty */0,
              v: x,
              d: d,
              r: /* Empty */0,
              h: 1
            };
    };
    var bal = function (l, x, d, r) {
      var hl = l ? l.h : 0;
      var hr = r ? r.h : 0;
      if (hl > (hr + 2 | 0)) {
        if (l) {
          var lr = l.r;
          var ld = l.d;
          var lv = l.v;
          var ll = l.l;
          if (height(ll) >= height(lr)) {
            return create(ll, lv, ld, create(lr, x, d, r));
          }
          if (lr) {
            return create(create(ll, lv, ld, lr.l), lr.v, lr.d, create(lr.r, x, d, r));
          }
          throw {
                RE_EXN_ID: "Invalid_argument",
                _1: "Map.bal",
                Error: new Error()
              };
        }
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "Map.bal",
              Error: new Error()
            };
      }
      if (hr <= (hl + 2 | 0)) {
        return /* Node */{
                l: l,
                v: x,
                d: d,
                r: r,
                h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
              };
      }
      if (r) {
        var rr = r.r;
        var rd = r.d;
        var rv = r.v;
        var rl = r.l;
        if (height(rr) >= height(rl)) {
          return create(create(l, x, d, rl), rv, rd, rr);
        }
        if (rl) {
          return create(create(l, x, d, rl.l), rl.v, rl.d, create(rl.r, rv, rd, rr));
        }
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "Map.bal",
              Error: new Error()
            };
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Map.bal",
            Error: new Error()
          };
    };
    var is_empty = function (param) {
      if (param) {
        return false;
      } else {
        return true;
      }
    };
    var add = function (x, data, m) {
      if (!m) {
        return /* Node */{
                l: /* Empty */0,
                v: x,
                d: data,
                r: /* Empty */0,
                h: 1
              };
      }
      var r = m.r;
      var d = m.d;
      var v = m.v;
      var l = m.l;
      var c = _2(funarg.compare, x, v);
      if (c === 0) {
        if (d === data) {
          return m;
        } else {
          return /* Node */{
                  l: l,
                  v: x,
                  d: data,
                  r: r,
                  h: m.h
                };
        }
      }
      if (c < 0) {
        var ll = add(x, data, l);
        if (l === ll) {
          return m;
        } else {
          return bal(ll, v, d, r);
        }
      }
      var rr = add(x, data, r);
      if (r === rr) {
        return m;
      } else {
        return bal(l, v, d, rr);
      }
    };
    var find = function (x, _param) {
      while(true) {
        var param = _param;
        if (param) {
          var c = _2(funarg.compare, x, param.v);
          if (c === 0) {
            return param.d;
          }
          _param = c < 0 ? param.l : param.r;
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }  };
    var find_first = function (f, _param) {
      while(true) {
        var param = _param;
        if (param) {
          var v = param.v;
          if (_1(f, v)) {
            var _v0 = v;
            var _d0 = param.d;
            var _param$1 = param.l;
            while(true) {
              var param$1 = _param$1;
              var d0 = _d0;
              var v0 = _v0;
              if (!param$1) {
                return [
                        v0,
                        d0
                      ];
              }
              var v$1 = param$1.v;
              if (_1(f, v$1)) {
                _param$1 = param$1.l;
                _d0 = param$1.d;
                _v0 = v$1;
                continue ;
              }
              _param$1 = param$1.r;
              continue ;
            }        }
          _param = param.r;
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }  };
    var find_first_opt = function (f, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        var v = param.v;
        if (_1(f, v)) {
          var _v0 = v;
          var _d0 = param.d;
          var _param$1 = param.l;
          while(true) {
            var param$1 = _param$1;
            var d0 = _d0;
            var v0 = _v0;
            if (!param$1) {
              return [
                      v0,
                      d0
                    ];
            }
            var v$1 = param$1.v;
            if (_1(f, v$1)) {
              _param$1 = param$1.l;
              _d0 = param$1.d;
              _v0 = v$1;
              continue ;
            }
            _param$1 = param$1.r;
            continue ;
          }      }
        _param = param.r;
        continue ;
      }  };
    var find_last = function (f, _param) {
      while(true) {
        var param = _param;
        if (param) {
          var v = param.v;
          if (_1(f, v)) {
            var _v0 = v;
            var _d0 = param.d;
            var _param$1 = param.r;
            while(true) {
              var param$1 = _param$1;
              var d0 = _d0;
              var v0 = _v0;
              if (!param$1) {
                return [
                        v0,
                        d0
                      ];
              }
              var v$1 = param$1.v;
              if (_1(f, v$1)) {
                _param$1 = param$1.r;
                _d0 = param$1.d;
                _v0 = v$1;
                continue ;
              }
              _param$1 = param$1.l;
              continue ;
            }        }
          _param = param.l;
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }  };
    var find_last_opt = function (f, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        var v = param.v;
        if (_1(f, v)) {
          var _v0 = v;
          var _d0 = param.d;
          var _param$1 = param.r;
          while(true) {
            var param$1 = _param$1;
            var d0 = _d0;
            var v0 = _v0;
            if (!param$1) {
              return [
                      v0,
                      d0
                    ];
            }
            var v$1 = param$1.v;
            if (_1(f, v$1)) {
              _param$1 = param$1.r;
              _d0 = param$1.d;
              _v0 = v$1;
              continue ;
            }
            _param$1 = param$1.l;
            continue ;
          }      }
        _param = param.l;
        continue ;
      }  };
    var find_opt = function (x, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        var c = _2(funarg.compare, x, param.v);
        if (c === 0) {
          return some(param.d);
        }
        _param = c < 0 ? param.l : param.r;
        continue ;
      }  };
    var mem = function (x, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return false;
        }
        var c = _2(funarg.compare, x, param.v);
        if (c === 0) {
          return true;
        }
        _param = c < 0 ? param.l : param.r;
        continue ;
      }  };
    var min_binding = function (_param) {
      while(true) {
        var param = _param;
        if (param) {
          var l = param.l;
          if (!l) {
            return [
                    param.v,
                    param.d
                  ];
          }
          _param = l;
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }  };
    var min_binding_opt = function (_param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        var l = param.l;
        if (!l) {
          return [
                  param.v,
                  param.d
                ];
        }
        _param = l;
        continue ;
      }  };
    var max_binding = function (_param) {
      while(true) {
        var param = _param;
        if (param) {
          var r = param.r;
          if (!r) {
            return [
                    param.v,
                    param.d
                  ];
          }
          _param = r;
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }  };
    var max_binding_opt = function (_param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        var r = param.r;
        if (!r) {
          return [
                  param.v,
                  param.d
                ];
        }
        _param = r;
        continue ;
      }  };
    var remove_min_binding = function (param) {
      if (param) {
        var l = param.l;
        if (l) {
          return bal(remove_min_binding(l), param.v, param.d, param.r);
        } else {
          return param.r;
        }
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Map.remove_min_elt",
            Error: new Error()
          };
    };
    var merge = function (t1, t2) {
      if (!t1) {
        return t2;
      }
      if (!t2) {
        return t1;
      }
      var match = min_binding(t2);
      return bal(t1, match[0], match[1], remove_min_binding(t2));
    };
    var remove = function (x, m) {
      if (!m) {
        return /* Empty */0;
      }
      var r = m.r;
      var d = m.d;
      var v = m.v;
      var l = m.l;
      var c = _2(funarg.compare, x, v);
      if (c === 0) {
        return merge(l, r);
      }
      if (c < 0) {
        var ll = remove(x, l);
        if (l === ll) {
          return m;
        } else {
          return bal(ll, v, d, r);
        }
      }
      var rr = remove(x, r);
      if (r === rr) {
        return m;
      } else {
        return bal(l, v, d, rr);
      }
    };
    var update = function (x, f, m) {
      if (m) {
        var r = m.r;
        var d = m.d;
        var v = m.v;
        var l = m.l;
        var c = _2(funarg.compare, x, v);
        if (c === 0) {
          var data = _1(f, some(d));
          if (data === undefined) {
            return merge(l, r);
          }
          var data$1 = valFromOption(data);
          if (d === data$1) {
            return m;
          } else {
            return /* Node */{
                    l: l,
                    v: x,
                    d: data$1,
                    r: r,
                    h: m.h
                  };
          }
        }
        if (c < 0) {
          var ll = update(x, f, l);
          if (l === ll) {
            return m;
          } else {
            return bal(ll, v, d, r);
          }
        }
        var rr = update(x, f, r);
        if (r === rr) {
          return m;
        } else {
          return bal(l, v, d, rr);
        }
      }
      var data$2 = _1(f, undefined);
      if (data$2 !== undefined) {
        return /* Node */{
                l: /* Empty */0,
                v: x,
                d: valFromOption(data$2),
                r: /* Empty */0,
                h: 1
              };
      } else {
        return /* Empty */0;
      }
    };
    var iter = function (f, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        iter(f, param.l);
        _2(f, param.v, param.d);
        _param = param.r;
        continue ;
      }  };
    var map = function (f, param) {
      if (!param) {
        return /* Empty */0;
      }
      var l$prime = map(f, param.l);
      var d$prime = _1(f, param.d);
      var r$prime = map(f, param.r);
      return /* Node */{
              l: l$prime,
              v: param.v,
              d: d$prime,
              r: r$prime,
              h: param.h
            };
    };
    var mapi = function (f, param) {
      if (!param) {
        return /* Empty */0;
      }
      var v = param.v;
      var l$prime = mapi(f, param.l);
      var d$prime = _2(f, v, param.d);
      var r$prime = mapi(f, param.r);
      return /* Node */{
              l: l$prime,
              v: v,
              d: d$prime,
              r: r$prime,
              h: param.h
            };
    };
    var fold = function (f, _m, _accu) {
      while(true) {
        var accu = _accu;
        var m = _m;
        if (!m) {
          return accu;
        }
        _accu = _3(f, m.v, m.d, fold(f, m.l, accu));
        _m = m.r;
        continue ;
      }  };
    var for_all = function (p, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return true;
        }
        if (!_2(p, param.v, param.d)) {
          return false;
        }
        if (!for_all(p, param.l)) {
          return false;
        }
        _param = param.r;
        continue ;
      }  };
    var exists = function (p, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return false;
        }
        if (_2(p, param.v, param.d)) {
          return true;
        }
        if (exists(p, param.l)) {
          return true;
        }
        _param = param.r;
        continue ;
      }  };
    var add_min_binding = function (k, x, param) {
      if (param) {
        return bal(add_min_binding(k, x, param.l), param.v, param.d, param.r);
      } else {
        return singleton(k, x);
      }
    };
    var add_max_binding = function (k, x, param) {
      if (param) {
        return bal(param.l, param.v, param.d, add_max_binding(k, x, param.r));
      } else {
        return singleton(k, x);
      }
    };
    var join = function (l, v, d, r) {
      if (!l) {
        return add_min_binding(v, d, r);
      }
      if (!r) {
        return add_max_binding(v, d, l);
      }
      var rh = r.h;
      var lh = l.h;
      if (lh > (rh + 2 | 0)) {
        return bal(l.l, l.v, l.d, join(l.r, v, d, r));
      } else if (rh > (lh + 2 | 0)) {
        return bal(join(l, v, d, r.l), r.v, r.d, r.r);
      } else {
        return create(l, v, d, r);
      }
    };
    var concat = function (t1, t2) {
      if (!t1) {
        return t2;
      }
      if (!t2) {
        return t1;
      }
      var match = min_binding(t2);
      return join(t1, match[0], match[1], remove_min_binding(t2));
    };
    var concat_or_join = function (t1, v, d, t2) {
      if (d !== undefined) {
        return join(t1, v, valFromOption(d), t2);
      } else {
        return concat(t1, t2);
      }
    };
    var split = function (x, param) {
      if (!param) {
        return [
                /* Empty */0,
                undefined,
                /* Empty */0
              ];
      }
      var r = param.r;
      var d = param.d;
      var v = param.v;
      var l = param.l;
      var c = _2(funarg.compare, x, v);
      if (c === 0) {
        return [
                l,
                some(d),
                r
              ];
      }
      if (c < 0) {
        var match = split(x, l);
        return [
                match[0],
                match[1],
                join(match[2], v, d, r)
              ];
      }
      var match$1 = split(x, r);
      return [
              join(l, v, d, match$1[0]),
              match$1[1],
              match$1[2]
            ];
    };
    var merge$1 = function (f, s1, s2) {
      if (s1) {
        var v1 = s1.v;
        if (s1.h >= height(s2)) {
          var match = split(v1, s2);
          return concat_or_join(merge$1(f, s1.l, match[0]), v1, _3(f, v1, some(s1.d), match[1]), merge$1(f, s1.r, match[2]));
        }
        
      } else if (!s2) {
        return /* Empty */0;
      }
      if (s2) {
        var v2 = s2.v;
        var match$1 = split(v2, s1);
        return concat_or_join(merge$1(f, match$1[0], s2.l), v2, _3(f, v2, match$1[1], some(s2.d)), merge$1(f, match$1[2], s2.r));
      }
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "map.ml",
              393,
              10
            ],
            Error: new Error()
          };
    };
    var union = function (f, s1, s2) {
      if (!s1) {
        return s2;
      }
      if (!s2) {
        return s1;
      }
      var d2 = s2.d;
      var v2 = s2.v;
      var d1 = s1.d;
      var v1 = s1.v;
      if (s1.h >= s2.h) {
        var match = split(v1, s2);
        var d2$1 = match[1];
        var l = union(f, s1.l, match[0]);
        var r = union(f, s1.r, match[2]);
        if (d2$1 !== undefined) {
          return concat_or_join(l, v1, _3(f, v1, d1, valFromOption(d2$1)), r);
        } else {
          return join(l, v1, d1, r);
        }
      }
      var match$1 = split(v2, s1);
      var d1$1 = match$1[1];
      var l$1 = union(f, match$1[0], s2.l);
      var r$1 = union(f, match$1[2], s2.r);
      if (d1$1 !== undefined) {
        return concat_or_join(l$1, v2, _3(f, v2, valFromOption(d1$1), d2), r$1);
      } else {
        return join(l$1, v2, d2, r$1);
      }
    };
    var filter = function (p, m) {
      if (!m) {
        return /* Empty */0;
      }
      var r = m.r;
      var d = m.d;
      var v = m.v;
      var l = m.l;
      var l$prime = filter(p, l);
      var pvd = _2(p, v, d);
      var r$prime = filter(p, r);
      if (pvd) {
        if (l === l$prime && r === r$prime) {
          return m;
        } else {
          return join(l$prime, v, d, r$prime);
        }
      } else {
        return concat(l$prime, r$prime);
      }
    };
    var partition = function (p, param) {
      if (!param) {
        return [
                /* Empty */0,
                /* Empty */0
              ];
      }
      var d = param.d;
      var v = param.v;
      var match = partition(p, param.l);
      var lf = match[1];
      var lt = match[0];
      var pvd = _2(p, v, d);
      var match$1 = partition(p, param.r);
      var rf = match$1[1];
      var rt = match$1[0];
      if (pvd) {
        return [
                join(lt, v, d, rt),
                concat(lf, rf)
              ];
      } else {
        return [
                concat(lt, rt),
                join(lf, v, d, rf)
              ];
      }
    };
    var cons_enum = function (_m, _e) {
      while(true) {
        var e = _e;
        var m = _m;
        if (!m) {
          return e;
        }
        _e = /* More */{
          _0: m.v,
          _1: m.d,
          _2: m.r,
          _3: e
        };
        _m = m.l;
        continue ;
      }  };
    var compare = function (cmp, m1, m2) {
      var _e1 = cons_enum(m1, /* End */0);
      var _e2 = cons_enum(m2, /* End */0);
      while(true) {
        var e2 = _e2;
        var e1 = _e1;
        if (!e1) {
          if (e2) {
            return -1;
          } else {
            return 0;
          }
        }
        if (!e2) {
          return 1;
        }
        var c = _2(funarg.compare, e1._0, e2._0);
        if (c !== 0) {
          return c;
        }
        var c$1 = _2(cmp, e1._1, e2._1);
        if (c$1 !== 0) {
          return c$1;
        }
        _e2 = cons_enum(e2._2, e2._3);
        _e1 = cons_enum(e1._2, e1._3);
        continue ;
      }  };
    var equal = function (cmp, m1, m2) {
      var _e1 = cons_enum(m1, /* End */0);
      var _e2 = cons_enum(m2, /* End */0);
      while(true) {
        var e2 = _e2;
        var e1 = _e1;
        if (!e1) {
          if (e2) {
            return false;
          } else {
            return true;
          }
        }
        if (!e2) {
          return false;
        }
        if (_2(funarg.compare, e1._0, e2._0) !== 0) {
          return false;
        }
        if (!_2(cmp, e1._1, e2._1)) {
          return false;
        }
        _e2 = cons_enum(e2._2, e2._3);
        _e1 = cons_enum(e1._2, e1._3);
        continue ;
      }  };
    var cardinal = function (param) {
      if (param) {
        return (cardinal(param.l) + 1 | 0) + cardinal(param.r) | 0;
      } else {
        return 0;
      }
    };
    var bindings_aux = function (_accu, _param) {
      while(true) {
        var param = _param;
        var accu = _accu;
        if (!param) {
          return accu;
        }
        _param = param.l;
        _accu = {
          hd: [
            param.v,
            param.d
          ],
          tl: bindings_aux(accu, param.r)
        };
        continue ;
      }  };
    var bindings = function (s) {
      return bindings_aux(/* [] */0, s);
    };
    return {
            empty: /* Empty */0,
            is_empty: is_empty,
            mem: mem,
            add: add,
            update: update,
            singleton: singleton,
            remove: remove,
            merge: merge$1,
            union: union,
            compare: compare,
            equal: equal,
            iter: iter,
            fold: fold,
            for_all: for_all,
            exists: exists,
            filter: filter,
            partition: partition,
            cardinal: cardinal,
            bindings: bindings,
            min_binding: min_binding,
            min_binding_opt: min_binding_opt,
            max_binding: max_binding,
            max_binding_opt: max_binding_opt,
            choose: min_binding,
            choose_opt: min_binding_opt,
            split: split,
            find: find,
            find_opt: find_opt,
            find_first: find_first,
            find_first_opt: find_first_opt,
            find_last: find_last,
            find_last_opt: find_last_opt,
            map: map,
            mapi: mapi
          };
  }
  /* No side effect */

  function Make(funarg) {
    var height = function (param) {
      if (param) {
        return param.h;
      } else {
        return 0;
      }
    };
    var create = function (l, v, r) {
      var hl = l ? l.h : 0;
      var hr = r ? r.h : 0;
      return /* Node */{
              l: l,
              v: v,
              r: r,
              h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            };
    };
    var bal = function (l, v, r) {
      var hl = l ? l.h : 0;
      var hr = r ? r.h : 0;
      if (hl > (hr + 2 | 0)) {
        if (l) {
          var lr = l.r;
          var lv = l.v;
          var ll = l.l;
          if (height(ll) >= height(lr)) {
            return create(ll, lv, create(lr, v, r));
          }
          if (lr) {
            return create(create(ll, lv, lr.l), lr.v, create(lr.r, v, r));
          }
          throw {
                RE_EXN_ID: "Invalid_argument",
                _1: "Set.bal",
                Error: new Error()
              };
        }
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "Set.bal",
              Error: new Error()
            };
      }
      if (hr <= (hl + 2 | 0)) {
        return /* Node */{
                l: l,
                v: v,
                r: r,
                h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
              };
      }
      if (r) {
        var rr = r.r;
        var rv = r.v;
        var rl = r.l;
        if (height(rr) >= height(rl)) {
          return create(create(l, v, rl), rv, rr);
        }
        if (rl) {
          return create(create(l, v, rl.l), rl.v, create(rl.r, rv, rr));
        }
        throw {
              RE_EXN_ID: "Invalid_argument",
              _1: "Set.bal",
              Error: new Error()
            };
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Set.bal",
            Error: new Error()
          };
    };
    var add = function (x, t) {
      if (!t) {
        return /* Node */{
                l: /* Empty */0,
                v: x,
                r: /* Empty */0,
                h: 1
              };
      }
      var r = t.r;
      var v = t.v;
      var l = t.l;
      var c = _2(funarg.compare, x, v);
      if (c === 0) {
        return t;
      }
      if (c < 0) {
        var ll = add(x, l);
        if (l === ll) {
          return t;
        } else {
          return bal(ll, v, r);
        }
      }
      var rr = add(x, r);
      if (r === rr) {
        return t;
      } else {
        return bal(l, v, rr);
      }
    };
    var singleton = function (x) {
      return /* Node */{
              l: /* Empty */0,
              v: x,
              r: /* Empty */0,
              h: 1
            };
    };
    var add_min_element = function (x, param) {
      if (param) {
        return bal(add_min_element(x, param.l), param.v, param.r);
      } else {
        return singleton(x);
      }
    };
    var add_max_element = function (x, param) {
      if (param) {
        return bal(param.l, param.v, add_max_element(x, param.r));
      } else {
        return singleton(x);
      }
    };
    var join = function (l, v, r) {
      if (!l) {
        return add_min_element(v, r);
      }
      if (!r) {
        return add_max_element(v, l);
      }
      var rh = r.h;
      var lh = l.h;
      if (lh > (rh + 2 | 0)) {
        return bal(l.l, l.v, join(l.r, v, r));
      } else if (rh > (lh + 2 | 0)) {
        return bal(join(l, v, r.l), r.v, r.r);
      } else {
        return create(l, v, r);
      }
    };
    var min_elt = function (_param) {
      while(true) {
        var param = _param;
        if (param) {
          var l = param.l;
          if (!l) {
            return param.v;
          }
          _param = l;
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }  };
    var min_elt_opt = function (_param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        var l = param.l;
        if (!l) {
          return some(param.v);
        }
        _param = l;
        continue ;
      }  };
    var max_elt = function (_param) {
      while(true) {
        var param = _param;
        if (param) {
          var r = param.r;
          if (!r) {
            return param.v;
          }
          _param = r;
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }  };
    var max_elt_opt = function (_param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        var r = param.r;
        if (!r) {
          return some(param.v);
        }
        _param = r;
        continue ;
      }  };
    var remove_min_elt = function (param) {
      if (param) {
        var l = param.l;
        if (l) {
          return bal(remove_min_elt(l), param.v, param.r);
        } else {
          return param.r;
        }
      }
      throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "Set.remove_min_elt",
            Error: new Error()
          };
    };
    var concat = function (t1, t2) {
      if (t1) {
        if (t2) {
          return join(t1, min_elt(t2), remove_min_elt(t2));
        } else {
          return t1;
        }
      } else {
        return t2;
      }
    };
    var split = function (x, param) {
      if (!param) {
        return [
                /* Empty */0,
                false,
                /* Empty */0
              ];
      }
      var r = param.r;
      var v = param.v;
      var l = param.l;
      var c = _2(funarg.compare, x, v);
      if (c === 0) {
        return [
                l,
                true,
                r
              ];
      }
      if (c < 0) {
        var match = split(x, l);
        return [
                match[0],
                match[1],
                join(match[2], v, r)
              ];
      }
      var match$1 = split(x, r);
      return [
              join(l, v, match$1[0]),
              match$1[1],
              match$1[2]
            ];
    };
    var is_empty = function (param) {
      if (param) {
        return false;
      } else {
        return true;
      }
    };
    var mem = function (x, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return false;
        }
        var c = _2(funarg.compare, x, param.v);
        if (c === 0) {
          return true;
        }
        _param = c < 0 ? param.l : param.r;
        continue ;
      }  };
    var remove = function (x, t) {
      if (!t) {
        return /* Empty */0;
      }
      var r = t.r;
      var v = t.v;
      var l = t.l;
      var c = _2(funarg.compare, x, v);
      if (c === 0) {
        if (l) {
          if (r) {
            return bal(l, min_elt(r), remove_min_elt(r));
          } else {
            return l;
          }
        } else {
          return r;
        }
      }
      if (c < 0) {
        var ll = remove(x, l);
        if (l === ll) {
          return t;
        } else {
          return bal(ll, v, r);
        }
      }
      var rr = remove(x, r);
      if (r === rr) {
        return t;
      } else {
        return bal(l, v, rr);
      }
    };
    var union = function (s1, s2) {
      if (!s1) {
        return s2;
      }
      if (!s2) {
        return s1;
      }
      var h2 = s2.h;
      var v2 = s2.v;
      var h1 = s1.h;
      var v1 = s1.v;
      if (h1 >= h2) {
        if (h2 === 1) {
          return add(v2, s1);
        }
        var match = split(v1, s2);
        return join(union(s1.l, match[0]), v1, union(s1.r, match[2]));
      }
      if (h1 === 1) {
        return add(v1, s2);
      }
      var match$1 = split(v2, s1);
      return join(union(match$1[0], s2.l), v2, union(match$1[2], s2.r));
    };
    var inter = function (s1, s2) {
      if (!s1) {
        return /* Empty */0;
      }
      if (!s2) {
        return /* Empty */0;
      }
      var r1 = s1.r;
      var v1 = s1.v;
      var l1 = s1.l;
      var match = split(v1, s2);
      var l2 = match[0];
      if (match[1]) {
        return join(inter(l1, l2), v1, inter(r1, match[2]));
      } else {
        return concat(inter(l1, l2), inter(r1, match[2]));
      }
    };
    var diff = function (s1, s2) {
      if (!s1) {
        return /* Empty */0;
      }
      if (!s2) {
        return s1;
      }
      var r1 = s1.r;
      var v1 = s1.v;
      var l1 = s1.l;
      var match = split(v1, s2);
      var l2 = match[0];
      if (match[1]) {
        return concat(diff(l1, l2), diff(r1, match[2]));
      } else {
        return join(diff(l1, l2), v1, diff(r1, match[2]));
      }
    };
    var cons_enum = function (_s, _e) {
      while(true) {
        var e = _e;
        var s = _s;
        if (!s) {
          return e;
        }
        _e = /* More */{
          _0: s.v,
          _1: s.r,
          _2: e
        };
        _s = s.l;
        continue ;
      }  };
    var compare = function (s1, s2) {
      var _e1 = cons_enum(s1, /* End */0);
      var _e2 = cons_enum(s2, /* End */0);
      while(true) {
        var e2 = _e2;
        var e1 = _e1;
        if (!e1) {
          if (e2) {
            return -1;
          } else {
            return 0;
          }
        }
        if (!e2) {
          return 1;
        }
        var c = _2(funarg.compare, e1._0, e2._0);
        if (c !== 0) {
          return c;
        }
        _e2 = cons_enum(e2._1, e2._2);
        _e1 = cons_enum(e1._1, e1._2);
        continue ;
      }  };
    var equal = function (s1, s2) {
      return compare(s1, s2) === 0;
    };
    var subset = function (_s1, _s2) {
      while(true) {
        var s2 = _s2;
        var s1 = _s1;
        if (!s1) {
          return true;
        }
        if (!s2) {
          return false;
        }
        var r2 = s2.r;
        var l2 = s2.l;
        var r1 = s1.r;
        var v1 = s1.v;
        var l1 = s1.l;
        var c = _2(funarg.compare, v1, s2.v);
        if (c === 0) {
          if (!subset(l1, l2)) {
            return false;
          }
          _s2 = r2;
          _s1 = r1;
          continue ;
        }
        if (c < 0) {
          if (!subset(/* Node */{
                  l: l1,
                  v: v1,
                  r: /* Empty */0,
                  h: 0
                }, l2)) {
            return false;
          }
          _s1 = r1;
          continue ;
        }
        if (!subset(/* Node */{
                l: /* Empty */0,
                v: v1,
                r: r1,
                h: 0
              }, r2)) {
          return false;
        }
        _s1 = l1;
        continue ;
      }  };
    var iter = function (f, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        iter(f, param.l);
        _1(f, param.v);
        _param = param.r;
        continue ;
      }  };
    var fold = function (f, _s, _accu) {
      while(true) {
        var accu = _accu;
        var s = _s;
        if (!s) {
          return accu;
        }
        _accu = _2(f, s.v, fold(f, s.l, accu));
        _s = s.r;
        continue ;
      }  };
    var for_all = function (p, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return true;
        }
        if (!_1(p, param.v)) {
          return false;
        }
        if (!for_all(p, param.l)) {
          return false;
        }
        _param = param.r;
        continue ;
      }  };
    var exists = function (p, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return false;
        }
        if (_1(p, param.v)) {
          return true;
        }
        if (exists(p, param.l)) {
          return true;
        }
        _param = param.r;
        continue ;
      }  };
    var filter = function (p, t) {
      if (!t) {
        return /* Empty */0;
      }
      var r = t.r;
      var v = t.v;
      var l = t.l;
      var l$prime = filter(p, l);
      var pv = _1(p, v);
      var r$prime = filter(p, r);
      if (pv) {
        if (l === l$prime && r === r$prime) {
          return t;
        } else {
          return join(l$prime, v, r$prime);
        }
      } else {
        return concat(l$prime, r$prime);
      }
    };
    var partition = function (p, param) {
      if (!param) {
        return [
                /* Empty */0,
                /* Empty */0
              ];
      }
      var v = param.v;
      var match = partition(p, param.l);
      var lf = match[1];
      var lt = match[0];
      var pv = _1(p, v);
      var match$1 = partition(p, param.r);
      var rf = match$1[1];
      var rt = match$1[0];
      if (pv) {
        return [
                join(lt, v, rt),
                concat(lf, rf)
              ];
      } else {
        return [
                concat(lt, rt),
                join(lf, v, rf)
              ];
      }
    };
    var cardinal = function (param) {
      if (param) {
        return (cardinal(param.l) + 1 | 0) + cardinal(param.r) | 0;
      } else {
        return 0;
      }
    };
    var elements_aux = function (_accu, _param) {
      while(true) {
        var param = _param;
        var accu = _accu;
        if (!param) {
          return accu;
        }
        _param = param.l;
        _accu = {
          hd: param.v,
          tl: elements_aux(accu, param.r)
        };
        continue ;
      }  };
    var elements = function (s) {
      return elements_aux(/* [] */0, s);
    };
    var find = function (x, _param) {
      while(true) {
        var param = _param;
        if (param) {
          var v = param.v;
          var c = _2(funarg.compare, x, v);
          if (c === 0) {
            return v;
          }
          _param = c < 0 ? param.l : param.r;
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }  };
    var find_first = function (f, _param) {
      while(true) {
        var param = _param;
        if (param) {
          var v = param.v;
          if (_1(f, v)) {
            var _v0 = v;
            var _param$1 = param.l;
            while(true) {
              var param$1 = _param$1;
              var v0 = _v0;
              if (!param$1) {
                return v0;
              }
              var v$1 = param$1.v;
              if (_1(f, v$1)) {
                _param$1 = param$1.l;
                _v0 = v$1;
                continue ;
              }
              _param$1 = param$1.r;
              continue ;
            }        }
          _param = param.r;
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }  };
    var find_first_opt = function (f, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        var v = param.v;
        if (_1(f, v)) {
          var _v0 = v;
          var _param$1 = param.l;
          while(true) {
            var param$1 = _param$1;
            var v0 = _v0;
            if (!param$1) {
              return some(v0);
            }
            var v$1 = param$1.v;
            if (_1(f, v$1)) {
              _param$1 = param$1.l;
              _v0 = v$1;
              continue ;
            }
            _param$1 = param$1.r;
            continue ;
          }      }
        _param = param.r;
        continue ;
      }  };
    var find_last = function (f, _param) {
      while(true) {
        var param = _param;
        if (param) {
          var v = param.v;
          if (_1(f, v)) {
            var _v0 = v;
            var _param$1 = param.r;
            while(true) {
              var param$1 = _param$1;
              var v0 = _v0;
              if (!param$1) {
                return v0;
              }
              var v$1 = param$1.v;
              if (_1(f, v$1)) {
                _param$1 = param$1.r;
                _v0 = v$1;
                continue ;
              }
              _param$1 = param$1.l;
              continue ;
            }        }
          _param = param.l;
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }  };
    var find_last_opt = function (f, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        var v = param.v;
        if (_1(f, v)) {
          var _v0 = v;
          var _param$1 = param.r;
          while(true) {
            var param$1 = _param$1;
            var v0 = _v0;
            if (!param$1) {
              return some(v0);
            }
            var v$1 = param$1.v;
            if (_1(f, v$1)) {
              _param$1 = param$1.r;
              _v0 = v$1;
              continue ;
            }
            _param$1 = param$1.l;
            continue ;
          }      }
        _param = param.l;
        continue ;
      }  };
    var find_opt = function (x, _param) {
      while(true) {
        var param = _param;
        if (!param) {
          return ;
        }
        var v = param.v;
        var c = _2(funarg.compare, x, v);
        if (c === 0) {
          return some(v);
        }
        _param = c < 0 ? param.l : param.r;
        continue ;
      }  };
    var map = function (f, t) {
      if (!t) {
        return /* Empty */0;
      }
      var r = t.r;
      var v = t.v;
      var l = t.l;
      var l$prime = map(f, l);
      var v$prime = _1(f, v);
      var r$prime = map(f, r);
      if (l === l$prime && v === v$prime && r === r$prime) {
        return t;
      } else if ((l$prime === /* Empty */0 || _2(funarg.compare, max_elt(l$prime), v$prime) < 0) && (r$prime === /* Empty */0 || _2(funarg.compare, v$prime, min_elt(r$prime)) < 0)) {
        return join(l$prime, v$prime, r$prime);
      } else {
        return union(l$prime, add(v$prime, r$prime));
      }
    };
    var of_list = function (l) {
      if (!l) {
        return /* Empty */0;
      }
      var match = l.tl;
      var x0 = l.hd;
      if (!match) {
        return singleton(x0);
      }
      var match$1 = match.tl;
      var x1 = match.hd;
      if (!match$1) {
        return add(x1, singleton(x0));
      }
      var match$2 = match$1.tl;
      var x2 = match$1.hd;
      if (!match$2) {
        return add(x2, add(x1, singleton(x0)));
      }
      var match$3 = match$2.tl;
      var x3 = match$2.hd;
      if (match$3) {
        if (match$3.tl) {
          var l$1 = sort_uniq(funarg.compare, l);
          var sub = function (n, l) {
            switch (n) {
              case 0 :
                  return [
                          /* Empty */0,
                          l
                        ];
              case 1 :
                  if (l) {
                    return [
                            /* Node */{
                              l: /* Empty */0,
                              v: l.hd,
                              r: /* Empty */0,
                              h: 1
                            },
                            l.tl
                          ];
                  }
                  break;
              case 2 :
                  if (l) {
                    var match = l.tl;
                    if (match) {
                      return [
                              /* Node */{
                                l: /* Node */{
                                  l: /* Empty */0,
                                  v: l.hd,
                                  r: /* Empty */0,
                                  h: 1
                                },
                                v: match.hd,
                                r: /* Empty */0,
                                h: 2
                              },
                              match.tl
                            ];
                    }
                    
                  }
                  break;
              case 3 :
                  if (l) {
                    var match$1 = l.tl;
                    if (match$1) {
                      var match$2 = match$1.tl;
                      if (match$2) {
                        return [
                                /* Node */{
                                  l: /* Node */{
                                    l: /* Empty */0,
                                    v: l.hd,
                                    r: /* Empty */0,
                                    h: 1
                                  },
                                  v: match$1.hd,
                                  r: /* Node */{
                                    l: /* Empty */0,
                                    v: match$2.hd,
                                    r: /* Empty */0,
                                    h: 1
                                  },
                                  h: 2
                                },
                                match$2.tl
                              ];
                      }
                      
                    }
                    
                  }
                  break;
                
            }
            var nl = n / 2 | 0;
            var match$3 = sub(nl, l);
            var l$1 = match$3[1];
            if (l$1) {
              var match$4 = sub((n - nl | 0) - 1 | 0, l$1.tl);
              return [
                      create(match$3[0], l$1.hd, match$4[0]),
                      match$4[1]
                    ];
            }
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "set.ml",
                    510,
                    18
                  ],
                  Error: new Error()
                };
          };
          return sub(length(l$1), l$1)[0];
        } else {
          return add(match$3.hd, add(x3, add(x2, add(x1, singleton(x0)))));
        }
      } else {
        return add(x3, add(x2, add(x1, singleton(x0))));
      }
    };
    return {
            empty: /* Empty */0,
            is_empty: is_empty,
            mem: mem,
            add: add,
            singleton: singleton,
            remove: remove,
            union: union,
            inter: inter,
            diff: diff,
            compare: compare,
            equal: equal,
            subset: subset,
            iter: iter,
            map: map,
            fold: fold,
            for_all: for_all,
            exists: exists,
            filter: filter,
            partition: partition,
            cardinal: cardinal,
            elements: elements,
            min_elt: min_elt,
            min_elt_opt: min_elt_opt,
            max_elt: max_elt,
            max_elt_opt: max_elt_opt,
            choose: min_elt,
            choose_opt: min_elt_opt,
            split: split,
            find: find,
            find_opt: find_opt,
            find_first: find_first,
            find_first_opt: find_first_opt,
            find_last: find_last,
            find_last_opt: find_last_opt,
            of_list: of_list
          };
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  var compare = caml_compare;

  var ResourceMap = Make$1({
        compare: compare
      });

  var compare$1 = caml_compare;

  var BoolFlagSet = Make({
        compare: compare$1
      });

  var compare$2 = caml_compare;

  var IntFlagMap = Make$1({
        compare: compare$2
      });

  var init_int_flags = _3(IntFlagMap.add, /* TimeActionIdx */0, 0, IntFlagMap.empty);

  var compare$3 = caml_compare;

  var FloatFlagMap = Make$1({
        compare: compare$3
      });

  var init_float_flags = _3(FloatFlagMap.add, /* BasicSolarPanelSelfGeneration */0, 0.0, FloatFlagMap.empty);

  function updateFrame(param_0) {
    return {
            TAG: /* UpdateFrame */0,
            _0: param_0
          };
  }

  var init_bool_flags = BoolFlagSet.empty;
  /* ResourceMap Not a pure module */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function bool_flag_exists(fid, model) {
    return _2(BoolFlagSet.mem, fid, model.bool_flags);
  }

  function bool_flag_set(fid, model) {
    var bool_flags = _2(BoolFlagSet.add, fid, model.bool_flags);
    return {
            start_realtime: model.start_realtime,
            current_realtime: model.current_realtime,
            gametime: model.gametime,
            msgs: model.msgs,
            resource_values: model.resource_values,
            bool_flags: bool_flags,
            int_flags: model.int_flags,
            float_flags: model.float_flags
          };
  }

  function bool_flag_reset(fid, model) {
    var bool_flags = _2(BoolFlagSet.remove, fid, model.bool_flags);
    return {
            start_realtime: model.start_realtime,
            current_realtime: model.current_realtime,
            gametime: model.gametime,
            msgs: model.msgs,
            resource_values: model.resource_values,
            bool_flags: bool_flags,
            int_flags: model.int_flags,
            float_flags: model.float_flags
          };
  }

  function int_flag_value(fid, model) {
    return _2(IntFlagMap.find, fid, model.int_flags);
  }

  function int_flag_set(fid, value, model) {
    var int_flags = _3(IntFlagMap.add, fid, value, model.int_flags);
    return {
            start_realtime: model.start_realtime,
            current_realtime: model.current_realtime,
            gametime: model.gametime,
            msgs: model.msgs,
            resource_values: model.resource_values,
            bool_flags: model.bool_flags,
            int_flags: int_flags,
            float_flags: model.float_flags
          };
  }

  function int_flag_add(fid, delta, model) {
    var value = delta + int_flag_value(fid, model) | 0;
    return int_flag_set(fid, value, model);
  }

  function float_flag_value(fid, model) {
    return _2(FloatFlagMap.find, fid, model.float_flags);
  }

  function float_flag_set(fid, value, model) {
    var float_flags = _3(FloatFlagMap.add, fid, value, model.float_flags);
    return {
            start_realtime: model.start_realtime,
            current_realtime: model.current_realtime,
            gametime: model.gametime,
            msgs: model.msgs,
            resource_values: model.resource_values,
            bool_flags: model.bool_flags,
            int_flags: model.int_flags,
            float_flags: float_flags
          };
  }

  function float_flag_add(fid, delta, model) {
    var value = delta + float_flag_value(fid, model);
    return float_flag_set(fid, value, model);
  }
  /* Overbots_types Not a pure module */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function shown(model) {
    return bool_flag_exists(/* InternalPowerEnabled */0, model);
  }

  function get_value_range(_model) {
    return [
            0.0,
            100.0
          ];
  }

  var Energy = {
    id: /* Energy */0,
    shown: shown,
    get_value_range: get_value_range
  };

  function shown$1(model) {
    return bool_flag_exists(/* DrillDeployed */3, model);
  }

  function get_value_range$1(_model) {
    return [
            0.0,
            10.0
          ];
  }

  var IronOxide = {
    id: /* IronOxide */1,
    shown: shown$1,
    get_value_range: get_value_range$1
  };

  function shown$2(model) {
    return bool_flag_exists(/* DrillDeployed */3, model);
  }

  function get_value_range$2(_model) {
    return [
            0.0,
            2.0
          ];
  }

  var RawSilicon = {
    id: /* RawSilicon */2,
    shown: shown$2,
    get_value_range: get_value_range$2
  };

  var all_resources = _3(ResourceMap.add, /* RawSilicon */2, RawSilicon, _3(ResourceMap.add, /* IronOxide */1, IronOxide, _3(ResourceMap.add, /* Energy */0, Energy, ResourceMap.empty)));

  function get_resource_module(rid) {
    return _2(ResourceMap.find, rid, all_resources);
  }

  function get_resource_value(rid, model) {
    return _2(ResourceMap.find, rid, model.resource_values);
  }

  function set_resource_value(rid, value, model) {
    var R = _2(ResourceMap.find, rid, all_resources);
    var match = _1(R.get_value_range, model);
    if (value < match[0]) {
      return /* ValueTooLow */0;
    }
    var rmax = match[1];
    if (value > rmax) {
      var resource_values = _3(ResourceMap.add, rid, rmax, model.resource_values);
      return {
              TAG: /* ValueTooHigh */0,
              _0: {
                start_realtime: model.start_realtime,
                current_realtime: model.current_realtime,
                gametime: model.gametime,
                msgs: model.msgs,
                resource_values: resource_values,
                bool_flags: model.bool_flags,
                int_flags: model.int_flags,
                float_flags: model.float_flags
              },
              _1: value - rmax
            };
    }
    var resource_values$1 = _3(ResourceMap.add, rid, value, model.resource_values);
    return {
            TAG: /* ValueSuccess */1,
            _0: {
              start_realtime: model.start_realtime,
              current_realtime: model.current_realtime,
              gametime: model.gametime,
              msgs: model.msgs,
              resource_values: resource_values$1,
              bool_flags: model.bool_flags,
              int_flags: model.int_flags,
              float_flags: model.float_flags
            }
          };
  }

  function add_resource_value(rid, delta, model) {
    var value = delta + get_resource_value(rid, model);
    return set_resource_value(rid, value, model);
  }

  function cost_resource(rid, delta, model) {
    var model$1 = add_resource_value(rid, -delta, model);
    if (typeof model$1 === "number" || model$1.TAG === /* ValueTooHigh */0) {
      return ;
    } else {
      return model$1._0;
    }
  }

  function cost_resources(resources, model) {
    var aux = function (model, param) {
      if (model !== undefined) {
        return cost_resource(param[0], param[1], model);
      }
      
    };
    return fold_left(aux, model, resources);
  }

  function resource_folder(rid, _r, acc) {
    return _3(ResourceMap.add, rid, 0.0, acc);
  }

  var init_resources_values = _3(ResourceMap.fold, resource_folder, all_resources, ResourceMap.empty);

  var displayed_resources = {
    hd: [
      "",
      "global",
      {
        hd: [
          /* Energy */0,
          "Energy",
          "energy"
        ],
        tl: /* [] */0
      }
    ],
    tl: {
      hd: [
        "Raw",
        "raw",
        {
          hd: [
            /* IronOxide */1,
            "Iron Oxide",
            "ironoxide"
          ],
          tl: {
            hd: [
              /* RawSilicon */2,
              "Raw Silicon",
              "rawsilicon"
            ],
            tl: /* [] */0
          }
        }
      ],
      tl: /* [] */0
    }
  };
  /* all_resources Not a pure module */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function perform_action(model, msg) {
    if (typeof msg === "number") {
      return model;
    }
    switch (msg.TAG | 0) {
      case /* ActionAddMsg */0 :
          return {
                  start_realtime: model.start_realtime,
                  current_realtime: model.current_realtime,
                  gametime: model.gametime,
                  msgs: {
                    hd: /* TimeMsg */{
                      _0: model.gametime,
                      _1: msg._0
                    },
                    tl: model.msgs
                  },
                  resource_values: model.resource_values,
                  bool_flags: model.bool_flags,
                  int_flags: model.int_flags,
                  float_flags: model.float_flags
                };
      case /* ActionAddResourceAmount */1 :
          var model$1 = add_resource_value(msg._0, msg._1, model);
          if (typeof model$1 === "number") {
            return model;
          } else {
            return model$1._0;
          }
      case /* ActionSetBoolFlag */2 :
          return bool_flag_set(msg._0, model);
      case /* ActionClearBoolFlag */3 :
          return bool_flag_reset(msg._0, model);
      case /* ActionSetIntFlag */4 :
          return int_flag_set(msg._0, msg._1, model);
      case /* ActionAddIntFlag */5 :
          return int_flag_add(msg._0, msg._1, model);
      case /* ActionSetFloatFlag */6 :
          return float_flag_set(msg._0, msg._1, model);
      case /* ActionAddFloatFlag */7 :
          return float_flag_add(msg._0, msg._1, model);
      
    }
  }

  function perform_actions(model, actions) {
    return fold_left(perform_action, model, actions);
  }

  var timeactions = [
    {
      at: 0.0,
      actions: {
        hd: {
          TAG: /* ActionAddResourceAmount */1,
          _0: /* Energy */0,
          _1: 100.0
        },
        tl: /* [] */0
      }
    },
    {
      at: 1.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Hmm, what is going on?"
        },
        tl: /* [] */0
      }
    },
    {
      at: 3.0,
      actions: {
        hd: {
          TAG: /* ActionSetBoolFlag */2,
          _0: /* InternalPowerEnabled */0
        },
        tl: {
          hd: {
            TAG: /* ActionSetFloatFlag */6,
            _0: /* BasicSolarPanelSelfGeneration */0,
            _1: 100.0
          },
          tl: {
            hd: {
              TAG: /* ActionAddMsg */0,
              _0: "I appear to be getting power through an umbillica interface, however the data connection across it appears to be down..."
            },
            tl: /* [] */0
          }
        }
      }
    },
    {
      at: 5.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Running diagnostics..."
        },
        tl: /* [] */0
      }
    },
    {
      at: 7.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Minor damage detected, appears to be old micrometeroite impacts, armor has deflected damage from internal systems"
        },
        tl: /* [] */0
      }
    },
    {
      at: 10.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Supposed to be getting instructions from the umbillica, and the activation of power from it signifies that I am being activated to work"
        },
        tl: /* [] */0
      }
    },
    {
      at: 12.5,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "However, no information has come down, likely the primary craft has been damaged by micrometeroites as well, hence its inability to communicate instructions"
        },
        tl: /* [] */0
      }
    },
    {
      at: 15.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Fallback instructions are to acquire resources and prepare for settlement and/or re-acquisition"
        },
        tl: /* [] */0
      }
    },
    {
      at: 20.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Velocity sensors are showing that acceleration has not occurred, which should already have happened if I've been reactived"
        },
        tl: /* [] */0
      }
    },
    {
      at: 25.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Accelleration is now occurring..."
        },
        tl: /* [] */0
      }
    },
    {
      at: 30.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Vector is not changing, which indicates orbital entry is not being accounted for..."
        },
        tl: /* [] */0
      }
    },
    {
      at: 35.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Most probable explanation is that the accelleration is from the primary ship entering a planetery atmosphere without the engines firing"
        },
        tl: /* [] */0
      }
    },
    {
      at: 40.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "The primary ship does have a breaking system that can be deployed in the event of engine failure, the acceleration profile indicates that is what is occuring"
        },
        tl: /* [] */0
      }
    },
    {
      at: 50.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Waiting to be deployed..."
        },
        tl: /* [] */0
      }
    },
    {
      at: 60.0,
      actions: {
        hd: {
          TAG: /* ActionSetFloatFlag */6,
          _0: /* BasicSolarPanelSelfGeneration */0,
          _1: 0.0
        },
        tl: {
          hd: {
            TAG: /* ActionAddMsg */0,
            _0: "Confirmed, deployment has started, primary ship has launched me out in the landing assembly, umbillica is detached from the primary ship"
          },
          tl: /* [] */0
        }
      }
    },
    {
      at: 70.0,
      actions: {
        hd: {
          TAG: /* ActionAddMsg */0,
          _0: "Acceleration profile indicates the landing assembly parachutes have been deployed"
        },
        tl: /* [] */0
      }
    },
    {
      at: 80.0,
      actions: {
        hd: {
          TAG: /* ActionSetBoolFlag */2,
          _0: /* SolarPanelsReadyToUnfold */1
        },
        tl: {
          hd: {
            TAG: /* ActionAddMsg */0,
            _0: "Touchdown!  Landing assembly is unfolding.  I now need to deploy my solar energy collectors."
          },
          tl: /* [] */0
        }
      }
    },
    {
      at: max_float,
      actions: /* [] */0
    }
  ];

  function update_timeactions(model, time) {
    var idx = int_flag_value(/* TimeActionIdx */0, model);
    var match = get$2(timeactions, idx);
    if (time < match.at) {
      return [
              model,
              none
            ];
    }
    var model$1 = fold_left(perform_action, model, match.actions);
    var model$2 = int_flag_add(/* TimeActionIdx */0, 1, model$1);
    return [
            model$2,
            none
          ];
  }
  /* Overbots_flags Not a pure module */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function button_cost(_model, param) {
    if (param) {
      return {
              hd: [
                /* Energy */0,
                50.0
              ],
              tl: /* [] */0
            };
    } else {
      return {
              hd: [
                /* Energy */0,
                100.0
              ],
              tl: /* [] */0
            };
    }
  }

  function button_enabled(model, param) {
    if (param) {
      if (bool_flag_exists(/* DrillDeployed */3, model)) {
        return false;
      } else {
        return bool_flag_exists(/* SolarPanelsGenerating */2, model);
      }
    } else if (bool_flag_exists(/* SolarPanelsGenerating */2, model)) {
      return false;
    } else {
      return bool_flag_exists(/* SolarPanelsReadyToUnfold */1, model);
    }
  }

  function button_temporarily_disabled(model, _button) {
    if (_button) {
      return cost_resources({
                  hd: [
                    /* Energy */0,
                    50.0
                  ],
                  tl: /* [] */0
                }, model) === undefined;
    } else {
      return false;
    }
  }

  function button_actions(_model, param) {
    if (param) {
      return {
              hd: {
                TAG: /* ActionSetBoolFlag */2,
                _0: /* DrillDeployed */3
              },
              tl: {
                hd: {
                  TAG: /* ActionAddMsg */0,
                  _0: "Now that I've started acquiring resources I need to active my internal refineries to prepare the resources for use"
                },
                tl: /* [] */0
              }
            };
    } else {
      return {
              hd: {
                TAG: /* ActionSetBoolFlag */2,
                _0: /* SolarPanelsGenerating */2
              },
              tl: {
                hd: {
                  TAG: /* ActionClearBoolFlag */3,
                  _0: /* SolarPanelsReadyToUnfold */1
                },
                tl: {
                  hd: {
                    TAG: /* ActionAddMsg */0,
                    _0: "Energy is now being generated, now to acquire simple minerals by drilling"
                  },
                  tl: /* [] */0
                }
              }
            };
    }
  }

  function perform_button(orig_model, id) {
    if (!button_enabled(orig_model, id) || button_temporarily_disabled(orig_model, id)) {
      return [
              orig_model,
              none
            ];
    }
    var model = cost_resources(button_cost(orig_model, id), orig_model);
    if (model === undefined) {
      return [
              orig_model,
              none
            ];
    }
    var model$1 = perform_actions(model, button_actions(model, id));
    return [
            model$1,
            none
          ];
  }

  var displayed_buttons = {
    hd: [
      "Perform",
      "perform",
      {
        hd: [
          /* UnfoldSolarPanels */0,
          "unfold-solar-panels",
          "Unfold Solar Panels"
        ],
        tl: {
          hd: [
            /* DeployDrill */1,
            "deploy-drill",
            "Deploy Drill"
          ],
          tl: /* [] */0
        }
      }
    ],
    tl: /* [] */0
  };
  /* Overbots_flags Not a pure module */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function view_container(enabled, id, title, children) {
    if (enabled) {
      return div(undefined, undefined, {
                  hd: class$prime("container container-" + id),
                  tl: /* [] */0
                }, {
                  hd: div(undefined, undefined, {
                        hd: class$prime("title"),
                        tl: /* [] */0
                      }, {
                        hd: text(title),
                        tl: /* [] */0
                      }),
                  tl: {
                    hd: div(undefined, undefined, {
                          hd: class$prime("scroller " + id),
                          tl: /* [] */0
                        }, children),
                    tl: /* [] */0
                  }
                });
    } else {
      return noNode;
    }
  }

  function format_value(value) {
    if (value >= 10000.0) {
      return String(value | 0);
    }
    var str = string_of_float(value);
    var str$1 = sub(str, 0, caml_int_min(str.length, 6));
    return str$1 + make(6 - str$1.length | 0, /* '0' */48);
  }

  function view_resources_category_resource(model, param) {
    var rid = param[0];
    var r = get_resource_module(rid);
    if (!_1(r.shown, model)) {
      return /* [] */0;
    }
    var value = format_value(get_resource_value(rid, model));
    return {
            hd: div(undefined, undefined, {
                  hd: class$prime("resource resource-" + param[2]),
                  tl: /* [] */0
                }, {
                  hd: div(undefined, undefined, {
                        hd: class$prime("resource-name"),
                        tl: /* [] */0
                      }, {
                        hd: text(param[1]),
                        tl: /* [] */0
                      }),
                  tl: {
                    hd: div(undefined, undefined, {
                          hd: class$prime("resource-value"),
                          tl: /* [] */0
                        }, {
                          hd: text(value),
                          tl: /* [] */0
                        }),
                    tl: /* [] */0
                  }
                }),
            tl: /* [] */0
          };
  }

  function view_resources_categories(model, param) {
    var name = param[0];
    var children = flatten(map$3((function (param) {
                return view_resources_category_resource(model, param);
              }), param[2]));
    if (children === /* [] */0) {
      return /* [] */0;
    }
    var children$1 = name === "" ? children : ({
          hd: div(undefined, undefined, {
                hd: class$prime("category-title"),
                tl: /* [] */0
              }, {
                hd: text(name),
                tl: /* [] */0
              }),
          tl: children
        });
    return {
            hd: div(undefined, undefined, {
                  hd: class$prime("resource-category resource-category-" + param[1]),
                  tl: /* [] */0
                }, children$1),
            tl: /* [] */0
          };
  }

  function view_resources(model) {
    return flatten(map$3((function (param) {
                      return view_resources_categories(model, param);
                    }), displayed_resources));
  }

  function view_button(model, param) {
    var bid = param[0];
    if (button_enabled(model, bid)) {
      return {
              hd: button(undefined, undefined, {
                    hd: onClick({
                          TAG: /* ActionButtonClicked */1,
                          _0: bid
                        }),
                    tl: {
                      hd: Attributes.disabled(button_temporarily_disabled(model, bid)),
                      tl: {
                        hd: class$prime("action-button action-button-" + param[1]),
                        tl: /* [] */0
                      }
                    }
                  }, {
                    hd: text(param[2]),
                    tl: /* [] */0
                  }),
              tl: /* [] */0
            };
    } else {
      return /* [] */0;
    }
  }

  function view_buttons_category(model, param) {
    var children = flatten(map$3((function (param) {
                return view_button(model, param);
              }), param[2]));
    if (children === /* [] */0) {
      return /* [] */0;
    }
    var children_0 = div(undefined, undefined, {
          hd: class$prime("category-title"),
          tl: /* [] */0
        }, {
          hd: text(param[0]),
          tl: /* [] */0
        });
    var children$1 = {
      hd: children_0,
      tl: children
    };
    return {
            hd: div(undefined, undefined, {
                  hd: class$prime("button-category button-category-" + param[1]),
                  tl: /* [] */0
                }, children$1),
            tl: /* [] */0
          };
  }

  function view_buttons(model) {
    return flatten(map$3((function (param) {
                      return view_buttons_category(model, param);
                    }), displayed_buttons));
  }

  function view_msg(_model, param) {
    return div(undefined, undefined, {
                hd: class$prime("msg"),
                tl: /* [] */0
              }, {
                hd: text(String(param._0 | 0)),
                tl: {
                  hd: text(": "),
                  tl: {
                    hd: text(param._1),
                    tl: /* [] */0
                  }
                }
              });
  }

  function view_msgs(model) {
    return map$3((function (param) {
                  return view_msg(model, param);
                }), model.msgs);
  }

  function view(model) {
    return div(undefined, undefined, {
                hd: class$prime("overbots"),
                tl: /* [] */0
              }, {
                hd: div(undefined, undefined, {
                      hd: class$prime("header"),
                      tl: /* [] */0
                    }, {
                      hd: text("OverBots"),
                      tl: /* [] */0
                    }),
                tl: {
                  hd: div(undefined, undefined, {
                        hd: class$prime("body"),
                        tl: /* [] */0
                      }, {
                        hd: view_container(true, "resources", "Resources", view_resources(model)),
                        tl: {
                          hd: view_container(true, "actions", "Actions", view_buttons(model)),
                          tl: {
                            hd: view_container(true, "scanner", "Scanner", /* [] */0),
                            tl: /* [] */0
                          }
                        }
                      }),
                  tl: {
                    hd: view_container(true, "msgs", "Messages", view_msgs(model)),
                    tl: /* [] */0
                  }
                }
              });
  }
  /* Tea_html Not a pure module */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function update_state(model, new_time) {
    var time = new_time - model.start_realtime;
    var match = update_timeactions(model, time);
    var model$1 = match[0];
    var model_start_realtime = model$1.start_realtime;
    var model_msgs = model$1.msgs;
    var model_resource_values = model$1.resource_values;
    var model_bool_flags = model$1.bool_flags;
    var model_int_flags = model$1.int_flags;
    var model_float_flags = model$1.float_flags;
    var model$2 = {
      start_realtime: model_start_realtime,
      current_realtime: new_time,
      gametime: time,
      msgs: model_msgs,
      resource_values: model_resource_values,
      bool_flags: model_bool_flags,
      int_flags: model_int_flags,
      float_flags: model_float_flags
    };
    return [
            model$2,
            batch$1({
                  hd: match[1],
                  tl: /* [] */0
                })
          ];
  }
  /* Overbots_actions Not a pure module */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function every(keyOpt, tagger) {
    var key = keyOpt !== undefined ? keyOpt : "";
    var enableCall = function (callbacks) {
      var lastTime = {
        contents: Date.now()
      };
      var id = {
        contents: undefined
      };
      var onFrame = function (_time) {
        var time = Date.now();
        var _i = id.contents;
        if (_i === undefined) {
          return ;
        }
        var ret_delta = time < lastTime.contents ? 0.0 : time - lastTime.contents;
        var ret = {
          time: time,
          delta: ret_delta
        };
        lastTime.contents = time;
        _1(callbacks.enqueue, _1(tagger, ret));
        var _stillActive = id.contents;
        if (_stillActive !== undefined) {
          id.contents = window.requestAnimationFrame(onFrame);
          return ;
        }
        
      };
      id.contents = window.requestAnimationFrame(onFrame);
      return function (param) {
        var i = id.contents;
        if (i !== undefined) {
          window.cancelAnimationFrame(i);
          id.contents = undefined;
          return ;
        }
        
      };
    };
    return registration(key, enableCall);
  }
  /* No side effect */

  // Generated by ReScript, PLEASE EDIT WITH CARE

  function init(param) {
    var model = {
      start_realtime: -1.0,
      current_realtime: -1.0,
      gametime: 0.0,
      msgs: /* [] */0,
      resource_values: init_resources_values,
      bool_flags: init_bool_flags,
      int_flags: init_int_flags,
      float_flags: init_float_flags
    };
    return [
            model,
            none
          ];
  }

  function update(model, timeinfo) {
    if (timeinfo.TAG !== /* UpdateFrame */0) {
      return perform_button(model, timeinfo._0);
    }
    var time = timeinfo._0.time * 0.001;
    var model$1 = model.start_realtime >= 0.0 ? model : ({
          start_realtime: time,
          current_realtime: time,
          gametime: 0.0,
          msgs: model.msgs,
          resource_values: model.resource_values,
          bool_flags: model.bool_flags,
          int_flags: model.int_flags,
          float_flags: model.float_flags
        });
    return update_state(model$1, time);
  }

  function subscriptions(_model) {
    return batch({
                hd: every(undefined, updateFrame),
                tl: /* [] */0
              });
  }

  var partial_arg = {
    init: init,
    update: update,
    view: view,
    subscriptions: subscriptions
  };

  function main(param, param$1) {
    return standardProgram(partial_arg, param, param$1);
  }
  /* Overbots_view Not a pure module */

  exports.init = init;
  exports.main = main;
  exports.subscriptions = subscriptions;
  exports.update = update;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));
